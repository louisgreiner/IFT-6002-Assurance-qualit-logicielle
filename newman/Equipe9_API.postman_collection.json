{
	"info": {
		"_postman_id": "68469c52-ffb8-4ed1-a15a-360af43c3006",
		"name": "Equipe9_API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30672996",
		"_collection_link": "https://aql-equipe9.postman.co/workspace/equipe9-Workspace~fd78ead0-cc83-474c-8813-66ec323a6d16/collection/30672996-68469c52-ffb8-4ed1-a15a-360af43c3006?action=share&source=collection_link&creator=30672996"
	},
	"item": [
		{
			"name": "story1",
			"item": [
				{
					"name": "Scenario 1 : turn et reset",
					"item": [
						{
							"name": "Reset (init)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/reset",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"reset"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has the required field - turnNumber\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.turnNumber).to.exist;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Validate that the response body is in JSON format\", function () {\r",
											"  pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"The turn number is 1\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.turnNumber).to.exist.and.to.equal(1);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has the required field - turnNumber\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.turnNumber).to.exist;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Validate that the response body is in JSON format\", function () {\r",
											"  pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"The turn number is 2\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.turnNumber).to.exist.and.to.equal(2);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Reset",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/reset",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"reset"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has the required field - turnNumber\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.turnNumber).to.exist;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Validate that the response body is in JSON format\", function () {\r",
											"  pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"The turn number is 1\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.turnNumber).to.exist.and.to.equal(1);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						}
					],
					"description": "- Tours incrémentés (2)\n- Reset\n- Tour remis à 1"
				}
			]
		},
		{
			"name": "story2",
			"item": [
				{
					"name": "Scenario 1 : Ajout perso",
					"item": [
						{
							"name": "Reset (init)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/reset",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"reset"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add character Hamster (Bobix)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Bobix\",\r\n  \"type\": \"hamster\",\r\n  \"salary\": 200\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Character (Bobix) : not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 404\", function () {\r",
											"  pm.expect(pm.response.code).to.equal(404);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Error field is CHARACTER_NOT_FOUND\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"  \r",
											"    pm.expect(responseData.error).to.equal(\"CHARACTER_NOT_FOUND\");\r",
											"});\r",
											"\r",
											"pm.test(\"Description field is Character not found.\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"  \r",
											"    pm.expect(responseData.description).to.equal(\"Character not found.\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"No unwanted JSON items are present\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"  \r",
											"    const allowedProperties = [\"error\", \"description\"];\r",
											"  \r",
											"    Object.keys(responseData).forEach(function(key) {\r",
											"        pm.expect(allowedProperties).to.include(key);\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/characters/Bobix",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters",
										"Bobix"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Validate the response body to have the required field 'turnNumber'\", function () {",
											"  const responseData = pm.response.json();",
											"",
											"  pm.expect(responseData.turnNumber).to.exist;",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Character (Bobix) : found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"// Test for required fields in the response\r",
											"pm.test(\"Response has the required fields\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.name).to.exist;\r",
											"    pm.expect(responseData.type).to.exist;\r",
											"    pm.expect(responseData.reputationScore).to.exist;\r",
											"    pm.expect(responseData.bankBalance).to.exist;\r",
											"    pm.expect(responseData.nbLawsuits).to.exist;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Name is a non-empty string\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Reputation score is a non-negative integer\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.reputationScore).to.be.a('number').and.to.be.at.least(0, \"Reputation score should be a non-negative integer\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Bank balance is a non-negative number\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData.bankBalance).to.be.a('number');\r",
											"    pm.expect(responseData.bankBalance).to.be.at.least(0, \"Bank balance should be non-negative\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Name is 'Bobix'\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData.name).to.equal(\"Bobix\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Type is hamster\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.type).to.exist.and.to.equal(\"hamster\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Reputation score is 75\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData.reputationScore).to.equal(75);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Bank balance is 1000\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData.bankBalance).to.equal(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"No unwanted JSON fields\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    const allowedFields = [\"name\", \"type\", \"reputationScore\", \"bankBalance\", \"nbLawsuits\"];\r",
											"    const responseKeys = Object.keys(responseData);\r",
											"\r",
											"    responseKeys.forEach(function(key) {\r",
											"        pm.expect(allowedFields).to.include(key);\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/characters/Bobix",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters",
										"Bobix"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "Vérifie l'ajout du perso au bon moment (après /turn) et renvoie les bonnes infos\n\n- POST `/characters` => Ajout de Bob.\n    \n- GET `/characters/Bob` => Not found car le tour n’a pas encore été joué.\n- POST `/turn`\n- GET `/characters/Bob` => Retourne les informations de Bob."
				},
				{
					"name": "Scenario 2 : invalid type and salary",
					"item": [
						{
							"name": "Reset (init)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/reset",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"reset"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add character invalid type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 400\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(400);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Error field is INVALID_TYPE\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData).to.be.an('object');\r",
											"  pm.expect(responseData.error).to.exist.and.to.be.a('string').and.to.equal(\"INVALID_TYPE\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Description field Invalid type.\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData.description).to.exist.and.to.be.a('string').and.to.equal(\"Invalid type.\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"No unwanted JSON items are present\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"  \r",
											"    const allowedProperties = [\"error\", \"description\"];\r",
											"  \r",
											"    Object.keys(responseData).forEach(function(key) {\r",
											"        pm.expect(allowedProperties).to.include(key);\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Bobix\",\r\n  \"type\": \"surmulot\",\r\n  \"salary\": 200\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add character invalid salary",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Error field is INVALID_SALARY\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.error).to.exist.and.to.be.a('string').and.to.equal(\"INVALID_SALARY\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Description field is Salary must be > 0.\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData.description).to.exist.and.to.be.a('string').and.to.equal(\"Salary must be > 0.\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"No unwanted JSON items are present\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"  \r",
											"    const allowedProperties = [\"error\", \"description\"];\r",
											"  \r",
											"    Object.keys(responseData).forEach(function(key) {\r",
											"        pm.expect(allowedProperties).to.include(key);\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Bobix\",\r\n  \"type\": \"hamster\",\r\n  \"salary\": -200\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add character invalid name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Error field is INVALID_NAME\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.error).to.exist.and.to.be.a('string').and.to.equal(\"INVALID_NAME\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Description field is Salary must be > 0.\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData.description).to.exist.and.to.be.a('string').and.to.equal(\"Name cannot be empty\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"No unwanted JSON items are present\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"  \r",
											"    const allowedProperties = [\"error\", \"description\"];\r",
											"  \r",
											"    Object.keys(responseData).forEach(function(key) {\r",
											"        pm.expect(allowedProperties).to.include(key);\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"\",\r\n  \"type\": \"hamster\",\r\n  \"salary\": 200\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						}
					],
					"description": "Teste les cas où :\n\nSi le type de rongeur est invalide.\n\nSi le salaire est <= 0."
				},
				{
					"name": "Scenario 3 : ignore duplicate character",
					"item": [
						{
							"name": "Reset (init)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/reset",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"reset"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add character Hamster (Bobix)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Bobix\",\r\n  \"type\": \"hamster\",\r\n  \"salary\": 200\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add character Chinchilla (Bobix)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Bobix\",\r\n  \"type\": \"chinchilla\",\r\n  \"salary\": 200\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add character Rat (Bobix)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Bobix\",\r\n  \"type\": \"rat\",\r\n  \"salary\": 200\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required field - turnNumber\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.turnNumber).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"The turnNumber is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.turnNumber).to.be.a('number').and.to.be.at.least(0, \"Value should be a non-negative integer\");",
											"});",
											"",
											"",
											"pm.test(\"Response time is within an acceptable range\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"",
											"pm.test(\"Verify that the response body does not contain any additional unexpected fields\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.all.keys('turnNumber');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Character (Bobix) : hamster",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response has the required fields\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.name).to.exist;\r",
											"    pm.expect(responseData.type).to.exist;\r",
											"    pm.expect(responseData.reputationScore).to.exist;\r",
											"    pm.expect(responseData.bankBalance).to.exist;\r",
											"    pm.expect(responseData.nbLawsuits).to.exist;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Name is a non-empty string\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Reputation score is a non-negative integer\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.reputationScore).to.be.a('number').and.to.be.at.least(0, \"Reputation score should be a non-negative integer\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Name is 'Bobix'\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData.name).to.equal(\"Bobix\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Type is hamster and not rat\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.type).to.exist.and.to.equal(\"hamster\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"No unwanted JSON fields\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    const allowedFields = [\"name\", \"type\", \"reputationScore\", \"bankBalance\", \"nbLawsuits\"];\r",
											"    const responseKeys = Object.keys(responseData);\r",
											"\r",
											"    responseKeys.forEach(function(key) {\r",
											"        pm.expect(allowedFields).to.include(key);\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/characters/Bobix",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters",
										"Bobix"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required field - turnNumber\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.turnNumber).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"The turnNumber is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.turnNumber).to.be.a('number').and.to.be.at.least(0, \"Value should be a non-negative integer\");",
											"});",
											"",
											"",
											"pm.test(\"Response time is within an acceptable range\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"",
											"pm.test(\"Verify that the response body does not contain any additional unexpected fields\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.all.keys('turnNumber');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						}
					],
					"description": "Teste le cas où si on a plusieurs créations de Character différents : seul le premier est gardé\n\nCas dans le même tour"
				},
				{
					"name": "Scenario 3 : ignore duplicate character Copy",
					"item": [
						{
							"name": "Reset (init)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/reset",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"reset"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add character Hamster (Bobix)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Bobix\",\r\n  \"type\": \"hamster\",\r\n  \"salary\": 200\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add character Rat (Bobix)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Bobix\",\r\n  \"type\": \"rat\",\r\n  \"salary\": 200\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required field - turnNumber\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.turnNumber).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"The turnNumber is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.turnNumber).to.be.a('number').and.to.be.at.least(0, \"Value should be a non-negative integer\");",
											"});",
											"",
											"",
											"pm.test(\"Response time is within an acceptable range\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"",
											"pm.test(\"Verify that the response body does not contain any additional unexpected fields\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.all.keys('turnNumber');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Character (Bobix) : hamster",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response has the required fields\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.name).to.exist;\r",
											"    pm.expect(responseData.type).to.exist;\r",
											"    pm.expect(responseData.reputationScore).to.exist;\r",
											"    pm.expect(responseData.bankBalance).to.exist;\r",
											"    pm.expect(responseData.nbLawsuits).to.exist;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Name is a non-empty string\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Reputation score is a non-negative integer\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.reputationScore).to.be.a('number').and.to.be.at.least(0, \"Reputation score should be a non-negative integer\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Name is 'Bobix'\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData.name).to.equal(\"Bobix\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Type is hamster and not rat\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.type).to.exist.and.to.equal(\"hamster\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"No unwanted JSON fields\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    const allowedFields = [\"name\", \"type\", \"reputationScore\", \"bankBalance\", \"nbLawsuits\"];\r",
											"    const responseKeys = Object.keys(responseData);\r",
											"\r",
											"    responseKeys.forEach(function(key) {\r",
											"        pm.expect(allowedFields).to.include(key);\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/characters/Bobix",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters",
										"Bobix"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required field - turnNumber\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.turnNumber).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"The turnNumber is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.turnNumber).to.be.a('number').and.to.be.at.least(0, \"Value should be a non-negative integer\");",
											"});",
											"",
											"",
											"pm.test(\"Response time is within an acceptable range\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"",
											"pm.test(\"Verify that the response body does not contain any additional unexpected fields\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.all.keys('turnNumber');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						}
					],
					"description": "Teste le cas où si on a plusieurs créations de Character différents : seul le premier est gardé\n\nCas dans le même tour"
				},
				{
					"name": "Scenario 3bis : ignore duplicate character",
					"item": [
						{
							"name": "Reset (init)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/reset",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"reset"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add character Hamster (Bobix)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Bobix\",\r\n  \"type\": \"hamster\",\r\n  \"salary\": 200\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Validate the turnNumber field in the response\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.turnNumber).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Verify that turnNumber is a non-negative integer\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.turnNumber).to.exist;",
											"  pm.expect(responseData.turnNumber).to.be.a('number');",
											"  pm.expect(responseData.turnNumber).to.be.at.least(0);",
											"});",
											"",
											"",
											"pm.test(\"Response time is within acceptable range\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"",
											"pm.test(\"Verify that the response has the required fields\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.turnNumber).to.exist;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add character Rat (Bobix)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Bobix\",\r\n  \"type\": \"rat\",\r\n  \"salary\": 200\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required field - turnNumber\", function () {",
											"  const responseData = pm.response.json();",
											"",
											"  pm.expect(responseData).to.have.property(\"turnNumber\");",
											"});",
											"",
											"",
											"pm.test(\"The value of turnNumber is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.turnNumber).to.exist;",
											"    pm.expect(responseData.turnNumber).to.be.a('number');",
											"    pm.expect(responseData.turnNumber).to.satisfy(function (value) {",
											"        return value >= 0;",
											"    }, \"Value should be a non-negative integer\");",
											"});",
											"",
											"",
											"pm.test(\"Response time is within an acceptable range\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"",
											"pm.test(\"Verify that the response body is not empty\", function () {",
											"  const responseData = pm.response.json();",
											"",
											"  pm.expect(responseData).to.not.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Character (Bobix) : hamster",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response has the required fields\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.name).to.exist;\r",
											"    pm.expect(responseData.type).to.exist;\r",
											"    pm.expect(responseData.reputationScore).to.exist;\r",
											"    pm.expect(responseData.bankBalance).to.exist;\r",
											"    pm.expect(responseData.nbLawsuits).to.exist;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Name is a non-empty string\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Reputation score is a non-negative integer\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.reputationScore).to.be.a('number').and.to.be.at.least(0, \"Reputation score should be a non-negative integer\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Name is 'Bobix'\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData.name).to.equal(\"Bobix\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Type is hamster and not rat\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.type).to.exist.and.to.equal(\"hamster\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"No unwanted JSON fields\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    const allowedFields = [\"name\", \"type\", \"reputationScore\", \"bankBalance\", \"nbLawsuits\"];\r",
											"    const responseKeys = Object.keys(responseData);\r",
											"\r",
											"    responseKeys.forEach(function(key) {\r",
											"        pm.expect(allowedFields).to.include(key);\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/characters/Bobix",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters",
										"Bobix"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required field - turnNumber\", function () {",
											"  const responseData = pm.response.json();",
											"",
											"  pm.expect(responseData).to.have.property(\"turnNumber\");",
											"});",
											"",
											"",
											"pm.test(\"The value of turnNumber is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.turnNumber).to.exist;",
											"    pm.expect(responseData.turnNumber).to.be.a('number');",
											"    pm.expect(responseData.turnNumber).to.satisfy(function (value) {",
											"        return value >= 0;",
											"    }, \"Value should be a non-negative integer\");",
											"});",
											"",
											"",
											"pm.test(\"Response time is within an acceptable range\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"",
											"pm.test(\"Verify that the response body is not empty\", function () {",
											"  const responseData = pm.response.json();",
											"",
											"  pm.expect(responseData).to.not.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						}
					],
					"description": "Teste le cas où si on a plusieurs créations de Character différents : seul le premier est gardé\n\nCas dans 2 tours différents"
				},
				{
					"name": "Scenario 4 : Hamstagram",
					"item": [
						{
							"name": "Reset (init)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/reset",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"reset"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add character Hamster (Bobix)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Bobix\",\r\n  \"type\": \"hamster\",\r\n  \"salary\": 200\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Hamstagram (Bobix) not added yet",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 404\", function () {",
											"  pm.expect(pm.response.code).to.equal(404);",
											"});",
											"",
											"",
											"pm.test(\"Error field is CHARACTER_NOT_FOUND\", function () {",
											"    const responseData = pm.response.json();",
											"  ",
											"    pm.expect(responseData.error).to.equal(\"CHARACTER_NOT_FOUND\");",
											"});",
											"",
											"pm.test(\"Description field is Character not found.\", function () {",
											"    const responseData = pm.response.json();",
											"  ",
											"    pm.expect(responseData.description).to.equal(\"Character not found.\");",
											"});",
											"",
											"",
											"pm.test(\"No unwanted JSON items are present\", function () {",
											"    const responseData = pm.response.json();",
											"  ",
											"    const allowedProperties = [\"error\", \"description\"];",
											"  ",
											"    Object.keys(responseData).forEach(function(key) {",
											"        pm.expect(allowedProperties).to.include(key);",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/hamstagram/Bobix",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"hamstagram",
										"Bobix"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Validate the turnNumber field in the response\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.turnNumber).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Verify that turnNumber is a non-negative integer\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.turnNumber).to.exist;",
											"  pm.expect(responseData.turnNumber).to.be.a('number');",
											"  pm.expect(responseData.turnNumber).to.be.at.least(0);",
											"});",
											"",
											"",
											"pm.test(\"Response time is within acceptable range\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"",
											"pm.test(\"Verify that the response has the required fields\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.turnNumber).to.exist;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Hamstagram (Bobix)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Validate the username field is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"    ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.username).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Username should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"The nbFollowers field should be a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.nbFollowers).to.be.a('number');",
											"    pm.expect(responseData.nbFollowers).to.be.at.least(0);",
											"});",
											"",
											"",
											"pm.test(\"Check if username is Bobix\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.username).to.equal(\"Bobix\");",
											"});",
											"",
											"pm.test(\"Check if nbFollowers is 10000\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.nbFollowers).to.equal(10000);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/hamstagram/Bobix",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"hamstagram",
										"Bobix"
									]
								}
							},
							"response": []
						}
					],
					"description": "Teste le bon ajout après /turn et le message renvoyé pour un compte non existant"
				},
				{
					"name": "Scenario 5 : Comportement par tour",
					"item": [
						{
							"name": "Reset (init)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/reset",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"reset"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add character Hamster (Bobix)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Bobix\",\r\n  \"type\": \"hamster\",\r\n  \"salary\": 200\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Validate the turnNumber field in the response\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.turnNumber).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Verify that turnNumber is a non-negative integer\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.turnNumber).to.exist;",
											"  pm.expect(responseData.turnNumber).to.be.a('number');",
											"  pm.expect(responseData.turnNumber).to.be.at.least(0);",
											"});",
											"",
											"",
											"",
											"pm.test(\"Verify that the response has the required fields\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.turnNumber).to.exist;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Hamstagram (Bobix) : init",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Validate the username field is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"    ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.username).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Username should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"The nbFollowers field should be a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.nbFollowers).to.be.a('number');",
											"    pm.expect(responseData.nbFollowers).to.be.at.least(0);",
											"});",
											"",
											"",
											"pm.test(\"Check if username is Bobix\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.username).to.equal(\"Bobix\");",
											"});",
											"",
											"pm.test(\"Check if nbFollowers is 10000\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.nbFollowers).to.equal(10000);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/hamstagram/Bobix",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"hamstagram",
										"Bobix"
									]
								}
							},
							"response": []
						},
						{
							"name": "Character (Bobix) : init",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"// Test for required fields in the response\r",
											"pm.test(\"Response has the required fields\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.name).to.exist;\r",
											"    pm.expect(responseData.type).to.exist;\r",
											"    pm.expect(responseData.reputationScore).to.exist;\r",
											"    pm.expect(responseData.bankBalance).to.exist;\r",
											"    pm.expect(responseData.nbLawsuits).to.exist;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Name is a non-empty string\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Reputation score is a non-negative integer\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.reputationScore).to.be.a('number').and.to.be.at.least(0, \"Reputation score should be a non-negative integer\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Bank balance is a non-negative number\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData.bankBalance).to.be.a('number');\r",
											"    pm.expect(responseData.bankBalance).to.be.at.least(0, \"Bank balance should be non-negative\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Name is 'Bobix'\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData.name).to.equal(\"Bobix\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Type is hamster\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.type).to.exist.and.to.equal(\"hamster\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Reputation score is 75\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData.reputationScore).to.equal(75);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Bank balance is 1000\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData.bankBalance).to.equal(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"No unwanted JSON fields\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    const allowedFields = [\"name\", \"type\", \"reputationScore\", \"bankBalance\", \"nbLawsuits\"];\r",
											"    const responseKeys = Object.keys(responseData);\r",
											"\r",
											"    responseKeys.forEach(function(key) {\r",
											"        pm.expect(allowedFields).to.include(key);\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/characters/Bobix",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters",
										"Bobix"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Validate the turnNumber field in the response\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.turnNumber).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Verify that turnNumber is a non-negative integer\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.turnNumber).to.exist;",
											"  pm.expect(responseData.turnNumber).to.be.a('number');",
											"  pm.expect(responseData.turnNumber).to.be.at.least(0);",
											"});",
											"",
											"",
											"",
											"pm.test(\"Verify that the response has the required fields\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.turnNumber).to.exist;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Hamstagram (Bobix) after 1 turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Validate the username field is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"    ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.username).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Username should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"The nbFollowers field should be a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.nbFollowers).to.be.a('number');",
											"    pm.expect(responseData.nbFollowers).to.be.at.least(0);",
											"});",
											"",
											"",
											"",
											"pm.test(\"Check if nbFollowers is 9400 = 10000 - 600\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.nbFollowers).to.equal(9400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/hamstagram/Bobix",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"hamstagram",
										"Bobix"
									]
								}
							},
							"response": []
						},
						{
							"name": "Character (Bobix) : after 1 turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"// Test for required fields in the response\r",
											"pm.test(\"Response has the required fields\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.name).to.exist;\r",
											"    pm.expect(responseData.type).to.exist;\r",
											"    pm.expect(responseData.reputationScore).to.exist;\r",
											"    pm.expect(responseData.bankBalance).to.exist;\r",
											"    pm.expect(responseData.nbLawsuits).to.exist;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Reputation score is 69 = 75 - 6\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData.reputationScore).to.equal(69);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Bank balance is 900 = 1000 - 100\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData.bankBalance).to.equal(900);\r",
											"});\r",
											"\r",
											"pm.test(\"No unwanted JSON fields\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    const allowedFields = [\"name\", \"type\", \"reputationScore\", \"bankBalance\", \"nbLawsuits\"];\r",
											"    const responseKeys = Object.keys(responseData);\r",
											"\r",
											"    responseKeys.forEach(function(key) {\r",
											"        pm.expect(allowedFields).to.include(key);\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/characters/Bobix",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters",
										"Bobix"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "Teste le bon comportement par tour :\n\n- Les personnages sur Hamstagram perdent automatiquement 600 abonnés\n    \n- Tous les personnages perdent 100$\n    \n- Tous les personnages perdent 6 points de réputation."
				},
				{
					"name": "Scenario 6 : Elimination",
					"item": [
						{
							"name": "Reset (init)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/reset",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"reset"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add character Hamster (Bobix)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Bobix\",\r\n  \"type\": \"hamster\",\r\n  \"salary\": 200\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Validate the turnNumber field in the response\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.turnNumber).to.exist;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Validate the turnNumber field in the response\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.turnNumber).to.exist;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Validate the turnNumber field in the response\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.turnNumber).to.exist;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Validate the turnNumber field in the response\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.turnNumber).to.exist;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Validate the turnNumber field in the response\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.turnNumber).to.exist;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Validate the turnNumber field in the response\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.turnNumber).to.exist;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Validate the turnNumber field in the response\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.turnNumber).to.exist;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Validate the turnNumber field in the response\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.turnNumber).to.exist;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Validate the turnNumber field in the response\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.turnNumber).to.exist;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Validate the turnNumber field in the response\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.turnNumber).to.exist;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Validate the turnNumber field in the response\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.turnNumber).to.exist;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Character (Bobix) : not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 404\", function () {\r",
											"  pm.expect(pm.response.code).to.equal(404);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Error field is CHARACTER_NOT_FOUND\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"  \r",
											"    pm.expect(responseData.error).to.equal(\"CHARACTER_NOT_FOUND\");\r",
											"});\r",
											"\r",
											"pm.test(\"Description field is Character not found.\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"  \r",
											"    pm.expect(responseData.description).to.equal(\"Character not found.\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"No unwanted JSON items are present\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"  \r",
											"    const allowedProperties = [\"error\", \"description\"];\r",
											"  \r",
											"    Object.keys(responseData).forEach(function(key) {\r",
											"        pm.expect(allowedProperties).to.include(key);\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/characters/Bobix",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters",
										"Bobix"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "Teste l'élimination d'un personnage dû à sa réputation trop faible"
				}
			]
		},
		{
			"name": "story3",
			"item": [
				{
					"name": "Scénario 1 : Ajout d'un agent / acteur sur Hamstagram",
					"item": [
						{
							"name": "Reset (init)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/reset",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"reset"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add character Chinchilla (Claude)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Claude\",\r\n  \"type\": \"chinchilla\",\r\n  \"salary\": 200\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add character Hamster (Bobix)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Bobix\",\r\n  \"type\": \"hamster\",\r\n  \"salary\": 200\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required field - turnNumber\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.turnNumber).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"turnNumber is a non-negative integer\", function() {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.turnNumber).to.be.a('number');",
											"    pm.expect(responseData.turnNumber).to.satisfy(function(value) {",
											"        return value >= 0;",
											"    }, \"Value should be a non-negative integer\");",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"",
											"pm.test(\"Verify that the response is not empty\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.not.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Hamstagram (Claude)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Validate the username field is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"    ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.username).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Username should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"The nbFollowers field should be a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.nbFollowers).to.be.a('number');",
											"    pm.expect(responseData.nbFollowers).to.be.at.least(0);",
											"});",
											"",
											"",
											"pm.test(\"Check if username is Claude\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.username).to.equal(\"Claude\");",
											"});",
											"",
											"pm.test(\"Check if nbFollowers is 10000\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.nbFollowers).to.equal(10000);",
											"});",
											"",
											"pm.test(\"Check if 'Bobix' is in the represent field\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.represent).to.be.an('array').that.includes('Bobix');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/hamstagram/Claude",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"hamstagram",
										"Claude"
									]
								}
							},
							"response": []
						},
						{
							"name": "Hamstagram (Bobix)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Validate the username field is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"    ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.username).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Username should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"The nbFollowers field should be a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.nbFollowers).to.be.a('number');",
											"    pm.expect(responseData.nbFollowers).to.be.at.least(0);",
											"});",
											"",
											"",
											"pm.test(\"Check if username is Bobix\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.username).to.equal(\"Bobix\");",
											"});",
											"",
											"pm.test(\"Check if nbFollowers is 10000\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.nbFollowers).to.equal(10000);",
											"});",
											"",
											"",
											"pm.test(\"Check if representedBy is Claude\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.representedBy).to.equal(\"Claude\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "localhost:8181/hamstagram/Bobix",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"hamstagram",
										"Bobix"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Scénario 2 : Ajout d'agents (John et Rob) / acteur (Bobix) sur Hamstagram (Hamstrology (J plus proche de B que de R))",
					"item": [
						{
							"name": "Reset (init)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/reset",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"reset"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add character Chinchilla (John)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"John\",\r\n  \"type\": \"chinchilla\",\r\n  \"salary\": 200\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add character Chinchilla (Rob)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Rob\",\r\n  \"type\": \"chinchilla\",\r\n  \"salary\": 200\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add character Hamster (Bobix)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Bobix\",\r\n  \"type\": \"hamster\",\r\n  \"salary\": 200\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required field - turnNumber\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.turnNumber).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"turnNumber is a non-negative integer\", function() {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.turnNumber).to.be.a('number');",
											"    pm.expect(responseData.turnNumber).to.satisfy(function(value) {",
											"        return value >= 0;",
											"    }, \"Value should be a non-negative integer\");",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"",
											"pm.test(\"Verify that the response is not empty\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.not.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Hamstagram (Bobix)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Validate the username field is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"    ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.username).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Username should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"The nbFollowers field should be a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.nbFollowers).to.be.a('number');",
											"    pm.expect(responseData.nbFollowers).to.be.at.least(0);",
											"});",
											"",
											"",
											"pm.test(\"Check if username is Bobix\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.username).to.equal(\"Bobix\");",
											"});",
											"",
											"pm.test(\"Check if nbFollowers is 10000\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.nbFollowers).to.equal(10000);",
											"});",
											"",
											"",
											"pm.test(\"Check if representedBy is John\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.representedBy).to.equal(\"John\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/hamstagram/Bobix",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"hamstagram",
										"Bobix"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Scénario 3 : Ajout d'agents (John et Rob) / acteur (Suzanne) sur Hamstagram (Hamstrology (R plus proche de S que de J))",
					"item": [
						{
							"name": "Reset (init)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/reset",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"reset"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add character Chinchilla (John)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"John\",\r\n  \"type\": \"chinchilla\",\r\n  \"salary\": 200\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add character Chinchilla (Rob)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Rob\",\r\n  \"type\": \"chinchilla\",\r\n  \"salary\": 200\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add character Hamster (Suzanne)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Suzanne\",\r\n  \"type\": \"hamster\",\r\n  \"salary\": 200\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required field - turnNumber\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.turnNumber).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"turnNumber is a non-negative integer\", function() {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.turnNumber).to.be.a('number');",
											"    pm.expect(responseData.turnNumber).to.satisfy(function(value) {",
											"        return value >= 0;",
											"    }, \"Value should be a non-negative integer\");",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"",
											"pm.test(\"Verify that the response is not empty\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.not.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Hamstagram (Suzanne)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Validate the username field is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"    ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.username).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Username should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"The nbFollowers field should be a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.nbFollowers).to.be.a('number');",
											"    pm.expect(responseData.nbFollowers).to.be.at.least(0);",
											"});",
											"",
											"",
											"pm.test(\"Check if username is Suzanne\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.username).to.equal(\"Suzanne\");",
											"});",
											"",
											"pm.test(\"Check if nbFollowers is 10000\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.nbFollowers).to.equal(10000);",
											"});",
											"",
											"",
											"pm.test(\"Check if representedBy is Rob\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.representedBy).to.equal(\"Rob\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/hamstagram/Suzanne",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"hamstagram",
										"Suzanne"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Scénario 4 : Ajout de RattedIn account après tour",
					"item": [
						{
							"name": "Reset (init)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/reset",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"reset"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add character Chinchilla (Claude)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Claude\",\r\n  \"type\": \"chinchilla\",\r\n  \"salary\": 200\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "RattedIn (Claude) 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 404\", function () {",
											"  pm.expect(pm.response.code).to.equal(404);",
											"});",
											"",
											"",
											"pm.test(\"Error field is CHARACTER_NOT_FOUND\", function () {",
											"    const responseData = pm.response.json();",
											"  ",
											"    pm.expect(responseData.error).to.equal(\"CHARACTER_NOT_FOUND\");",
											"});",
											"",
											"pm.test(\"Description field is Character not found.\", function () {",
											"    const responseData = pm.response.json();",
											"  ",
											"    pm.expect(responseData.description).to.equal(\"Character not found.\");",
											"});",
											"",
											"",
											"pm.test(\"No unwanted JSON items are present\", function () {",
											"    const responseData = pm.response.json();",
											"  ",
											"    const allowedProperties = [\"error\", \"description\"];",
											"  ",
											"    Object.keys(responseData).forEach(function(key) {",
											"        pm.expect(allowedProperties).to.include(key);",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/rattedin/Claude",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"rattedin",
										"Claude"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required field - turnNumber\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.turnNumber).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"turnNumber is a non-negative integer\", function() {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.turnNumber).to.be.a('number');",
											"    pm.expect(responseData.turnNumber).to.satisfy(function(value) {",
											"        return value >= 0;",
											"    }, \"Value should be a non-negative integer\");",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"",
											"pm.test(\"Verify that the response is not empty\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.not.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "RattedIn (Claude)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has required fields\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.username).to.exist;",
											"    pm.expect(responseData.status).to.exist;",
											"    pm.expect(responseData.contacts).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Username is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.username).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Username should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Status is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Contacts should be an array\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.contacts).to.be.an('array');",
											"});",
											"",
											"pm.test(\"Check if username is Claude\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.username).to.equal(\"Claude\");",
											"});",
											"",
											"pm.test(\"Check if status is N/A\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.status).to.equal(\"N/A\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/rattedin/Claude",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"rattedin",
										"Claude"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Scénario 5 : demandes de contacts RattedIn traitées lors d'un tour",
					"item": [
						{
							"name": "Reset (init)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/reset",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"reset"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add character Rat (Zoe)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Zoe\",\r\n  \"type\": \"rat\",\r\n  \"salary\": 200\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add character Rat (Ratata)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Ratata\",\r\n  \"type\": \"rat\",\r\n  \"salary\": 200\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required field - turnNumber\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.turnNumber).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"turnNumber is a non-negative integer\", function() {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.turnNumber).to.be.a('number');",
											"    pm.expect(responseData.turnNumber).to.satisfy(function(value) {",
											"        return value >= 0;",
											"    }, \"Value should be a non-negative integer\");",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"",
											"pm.test(\"Verify that the response is not empty\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.not.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "RattedIn contact request Zoe to Ratata",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"Zoe\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/rattedin/Ratata/request",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"rattedin",
										"Ratata",
										"request"
									]
								}
							},
							"response": []
						},
						{
							"name": "RattedIn (Ratata)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has required fields\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.username).to.exist;",
											"    pm.expect(responseData.status).to.exist;",
											"    pm.expect(responseData.contacts).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Username is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.username).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Username should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Status is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Contacts should be an array\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.contacts).to.be.an('array');",
											"});",
											"",
											"pm.test(\"Check if username is Ratata\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.username).to.equal(\"Ratata\");",
											"});",
											"",
											"pm.test(\"Check if status is openToWork\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.status).to.equal(\"openToWork\");",
											"});",
											"",
											"pm.test(\"Check if contacts field is an empty array\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.contacts).to.be.an('array').and.to.have.lengthOf(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/rattedin/Ratata",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"rattedin",
										"Ratata"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required field - turnNumber\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.turnNumber).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"turnNumber is a non-negative integer\", function() {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.turnNumber).to.be.a('number');",
											"    pm.expect(responseData.turnNumber).to.satisfy(function(value) {",
											"        return value >= 0;",
											"    }, \"Value should be a non-negative integer\");",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"",
											"pm.test(\"Verify that the response is not empty\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.not.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "RattedIn (Ratata)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has required fields\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.username).to.exist;",
											"    pm.expect(responseData.status).to.exist;",
											"    pm.expect(responseData.contacts).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Username is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.username).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Username should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Status is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Contacts should be an array\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.contacts).to.be.an('array');",
											"});",
											"",
											"pm.test(\"Check if username is Ratata\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.username).to.equal(\"Ratata\");",
											"});",
											"",
											"pm.test(\"Check if status is openToWork\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.status).to.equal(\"openToWork\");",
											"});",
											"",
											"pm.test(\"Check if 'Zoe' is in the contacts field\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.contacts).to.be.an('array').that.includes('Zoe');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/rattedin/Ratata",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"rattedin",
										"Ratata"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "RattedIn (Zoe)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has required fields\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.username).to.exist;",
											"    pm.expect(responseData.status).to.exist;",
											"    pm.expect(responseData.contacts).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Username is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.username).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Username should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Status is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Contacts should be an array\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.contacts).to.be.an('array');",
											"});",
											"",
											"pm.test(\"Check if username is Zoe\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.username).to.equal(\"Zoe\");",
											"});",
											"",
											"pm.test(\"Check if status is openToWork\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.status).to.equal(\"openToWork\");",
											"});",
											"",
											"pm.test(\"Check if 'Ratata' is in the contacts field\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.contacts).to.be.an('array').that.includes('Ratata');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/rattedin/Zoe",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"rattedin",
										"Zoe"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Scénario 6 : eliminations de contacts RattedIn",
					"item": [
						{
							"name": "Reset (init)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/reset",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"reset"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add character Rat (Zoe)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Zoe\",\r\n  \"type\": \"rat\",\r\n  \"salary\": 200\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required field - turnNumber\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.turnNumber).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"turnNumber is a non-negative integer\", function() {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.turnNumber).to.be.a('number');",
											"    pm.expect(responseData.turnNumber).to.satisfy(function(value) {",
											"        return value >= 0;",
											"    }, \"Value should be a non-negative integer\");",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"",
											"pm.test(\"Verify that the response is not empty\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.not.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add character Rat (Ratata)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Ratata\",\r\n  \"type\": \"rat\",\r\n  \"salary\": 200\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required field - turnNumber\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.turnNumber).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"turnNumber is a non-negative integer\", function() {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.turnNumber).to.be.a('number');",
											"    pm.expect(responseData.turnNumber).to.satisfy(function(value) {",
											"        return value >= 0;",
											"    }, \"Value should be a non-negative integer\");",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"",
											"pm.test(\"Verify that the response is not empty\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.not.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "RattedIn contact request Zoe to Ratata",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"Zoe\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/rattedin/Ratata/request",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"rattedin",
										"Ratata",
										"request"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required field - turnNumber\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.turnNumber).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"turnNumber is a non-negative integer\", function() {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.turnNumber).to.be.a('number');",
											"    pm.expect(responseData.turnNumber).to.satisfy(function(value) {",
											"        return value >= 0;",
											"    }, \"Value should be a non-negative integer\");",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"",
											"pm.test(\"Verify that the response is not empty\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.not.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required field - turnNumber\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.turnNumber).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"turnNumber is a non-negative integer\", function() {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.turnNumber).to.be.a('number');",
											"    pm.expect(responseData.turnNumber).to.satisfy(function(value) {",
											"        return value >= 0;",
											"    }, \"Value should be a non-negative integer\");",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"",
											"pm.test(\"Verify that the response is not empty\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.not.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required field - turnNumber\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.turnNumber).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"turnNumber is a non-negative integer\", function() {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.turnNumber).to.be.a('number');",
											"    pm.expect(responseData.turnNumber).to.satisfy(function(value) {",
											"        return value >= 0;",
											"    }, \"Value should be a non-negative integer\");",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"",
											"pm.test(\"Verify that the response is not empty\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.not.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required field - turnNumber\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.turnNumber).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"turnNumber is a non-negative integer\", function() {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.turnNumber).to.be.a('number');",
											"    pm.expect(responseData.turnNumber).to.satisfy(function(value) {",
											"        return value >= 0;",
											"    }, \"Value should be a non-negative integer\");",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"",
											"pm.test(\"Verify that the response is not empty\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.not.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required field - turnNumber\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.turnNumber).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"turnNumber is a non-negative integer\", function() {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.turnNumber).to.be.a('number');",
											"    pm.expect(responseData.turnNumber).to.satisfy(function(value) {",
											"        return value >= 0;",
											"    }, \"Value should be a non-negative integer\");",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"",
											"pm.test(\"Verify that the response is not empty\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.not.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required field - turnNumber\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.turnNumber).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"turnNumber is a non-negative integer\", function() {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.turnNumber).to.be.a('number');",
											"    pm.expect(responseData.turnNumber).to.satisfy(function(value) {",
											"        return value >= 0;",
											"    }, \"Value should be a non-negative integer\");",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"",
											"pm.test(\"Verify that the response is not empty\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.not.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required field - turnNumber\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.turnNumber).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"turnNumber is a non-negative integer\", function() {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.turnNumber).to.be.a('number');",
											"    pm.expect(responseData.turnNumber).to.satisfy(function(value) {",
											"        return value >= 0;",
											"    }, \"Value should be a non-negative integer\");",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"",
											"pm.test(\"Verify that the response is not empty\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.not.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required field - turnNumber\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.turnNumber).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"turnNumber is a non-negative integer\", function() {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.turnNumber).to.be.a('number');",
											"    pm.expect(responseData.turnNumber).to.satisfy(function(value) {",
											"        return value >= 0;",
											"    }, \"Value should be a non-negative integer\");",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"",
											"pm.test(\"Verify that the response is not empty\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.not.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required field - turnNumber\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.turnNumber).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"turnNumber is a non-negative integer\", function() {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.turnNumber).to.be.a('number');",
											"    pm.expect(responseData.turnNumber).to.satisfy(function(value) {",
											"        return value >= 0;",
											"    }, \"Value should be a non-negative integer\");",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"",
											"pm.test(\"Verify that the response is not empty\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.not.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "RattedIn (Ratata)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has required fields\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.username).to.exist;",
											"    pm.expect(responseData.status).to.exist;",
											"    pm.expect(responseData.contacts).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Username is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.username).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Username should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Status is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Contacts should be an array\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.contacts).to.be.an('array');",
											"});",
											"",
											"pm.test(\"Check if username is Ratata\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.username).to.equal(\"Ratata\");",
											"});",
											"",
											"pm.test(\"Check if status is openToWork\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.status).to.equal(\"openToWork\");",
											"});",
											"",
											"pm.test(\"Check if contacts field is an empty array\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.contacts).to.be.an('array').and.to.have.lengthOf(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/rattedin/Ratata",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"rattedin",
										"Ratata"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "RattedIn (Zoe) 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 404\", function () {",
											"  pm.expect(pm.response.code).to.equal(404);",
											"});",
											"",
											"",
											"pm.test(\"Error field is CHARACTER_NOT_FOUND\", function () {",
											"    const responseData = pm.response.json();",
											"  ",
											"    pm.expect(responseData.error).to.equal(\"CHARACTER_NOT_FOUND\");",
											"});",
											"",
											"pm.test(\"Description field is Character not found.\", function () {",
											"    const responseData = pm.response.json();",
											"  ",
											"    pm.expect(responseData.description).to.equal(\"Character not found.\");",
											"});",
											"",
											"",
											"pm.test(\"No unwanted JSON items are present\", function () {",
											"    const responseData = pm.response.json();",
											"  ",
											"    const allowedProperties = [\"error\", \"description\"];",
											"  ",
											"    Object.keys(responseData).forEach(function(key) {",
											"        pm.expect(allowedProperties).to.include(key);",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/rattedin/Zoe",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"rattedin",
										"Zoe"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Scénario 7: eliminations de represent Hamstagram",
					"item": [
						{
							"name": "Reset (init)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/reset",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"reset"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add character hamster (Bobix)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Bobix\",\r\n  \"type\": \"hamster\",\r\n  \"salary\": 200\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required field - turnNumber\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.turnNumber).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"turnNumber is a non-negative integer\", function() {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.turnNumber).to.be.a('number');",
											"    pm.expect(responseData.turnNumber).to.satisfy(function(value) {",
											"        return value >= 0;",
											"    }, \"Value should be a non-negative integer\");",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"",
											"pm.test(\"Verify that the response is not empty\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.not.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add character chinchilla (Claude)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Claude\",\r\n  \"type\": \"chinchilla\",\r\n  \"salary\": 200\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required field - turnNumber\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.turnNumber).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"turnNumber is a non-negative integer\", function() {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.turnNumber).to.be.a('number');",
											"    pm.expect(responseData.turnNumber).to.satisfy(function(value) {",
											"        return value >= 0;",
											"    }, \"Value should be a non-negative integer\");",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"",
											"pm.test(\"Verify that the response is not empty\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.not.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required field - turnNumber\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.turnNumber).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"turnNumber is a non-negative integer\", function() {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.turnNumber).to.be.a('number');",
											"    pm.expect(responseData.turnNumber).to.satisfy(function(value) {",
											"        return value >= 0;",
											"    }, \"Value should be a non-negative integer\");",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"",
											"pm.test(\"Verify that the response is not empty\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.not.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required field - turnNumber\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.turnNumber).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"turnNumber is a non-negative integer\", function() {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.turnNumber).to.be.a('number');",
											"    pm.expect(responseData.turnNumber).to.satisfy(function(value) {",
											"        return value >= 0;",
											"    }, \"Value should be a non-negative integer\");",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"",
											"pm.test(\"Verify that the response is not empty\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.not.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required field - turnNumber\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.turnNumber).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"turnNumber is a non-negative integer\", function() {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.turnNumber).to.be.a('number');",
											"    pm.expect(responseData.turnNumber).to.satisfy(function(value) {",
											"        return value >= 0;",
											"    }, \"Value should be a non-negative integer\");",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"",
											"pm.test(\"Verify that the response is not empty\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.not.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required field - turnNumber\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.turnNumber).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"turnNumber is a non-negative integer\", function() {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.turnNumber).to.be.a('number');",
											"    pm.expect(responseData.turnNumber).to.satisfy(function(value) {",
											"        return value >= 0;",
											"    }, \"Value should be a non-negative integer\");",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"",
											"pm.test(\"Verify that the response is not empty\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.not.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required field - turnNumber\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.turnNumber).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"turnNumber is a non-negative integer\", function() {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.turnNumber).to.be.a('number');",
											"    pm.expect(responseData.turnNumber).to.satisfy(function(value) {",
											"        return value >= 0;",
											"    }, \"Value should be a non-negative integer\");",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"",
											"pm.test(\"Verify that the response is not empty\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.not.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required field - turnNumber\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.turnNumber).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"turnNumber is a non-negative integer\", function() {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.turnNumber).to.be.a('number');",
											"    pm.expect(responseData.turnNumber).to.satisfy(function(value) {",
											"        return value >= 0;",
											"    }, \"Value should be a non-negative integer\");",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"",
											"pm.test(\"Verify that the response is not empty\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.not.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required field - turnNumber\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.turnNumber).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"turnNumber is a non-negative integer\", function() {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.turnNumber).to.be.a('number');",
											"    pm.expect(responseData.turnNumber).to.satisfy(function(value) {",
											"        return value >= 0;",
											"    }, \"Value should be a non-negative integer\");",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"",
											"pm.test(\"Verify that the response is not empty\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.not.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required field - turnNumber\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.turnNumber).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"turnNumber is a non-negative integer\", function() {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.turnNumber).to.be.a('number');",
											"    pm.expect(responseData.turnNumber).to.satisfy(function(value) {",
											"        return value >= 0;",
											"    }, \"Value should be a non-negative integer\");",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"",
											"pm.test(\"Verify that the response is not empty\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.not.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required field - turnNumber\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.turnNumber).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"turnNumber is a non-negative integer\", function() {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.turnNumber).to.be.a('number');",
											"    pm.expect(responseData.turnNumber).to.satisfy(function(value) {",
											"        return value >= 0;",
											"    }, \"Value should be a non-negative integer\");",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"",
											"pm.test(\"Verify that the response is not empty\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.not.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Hamstagram (Claude)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Validate the username field is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"    ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.username).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Username should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"The nbFollowers field should be a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.nbFollowers).to.be.a('number');",
											"    pm.expect(responseData.nbFollowers).to.be.at.least(0);",
											"});",
											"",
											"",
											"pm.test(\"Check if username is Claude\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.username).to.equal(\"Claude\");",
											"});",
											"",
											"pm.test(\"Check if nbFollowers is 4600\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.nbFollowers).to.equal(4600);",
											"});",
											"",
											"",
											"pm.test(\"Check if represent field is an empty array\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.represent).to.be.an('array').and.to.have.lengthOf(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/hamstagram/Claude",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"hamstagram",
										"Claude"
									]
								}
							},
							"response": []
						},
						{
							"name": "Hamstagram (Bobix) 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 404\", function () {",
											"  pm.expect(pm.response.code).to.equal(404);",
											"});",
											"",
											"pm.test(\"Error field is CHARACTER_NOT_FOUND\", function () {",
											"    const responseData = pm.response.json();",
											"  ",
											"    pm.expect(responseData.error).to.equal(\"CHARACTER_NOT_FOUND\");",
											"});",
											"",
											"pm.test(\"Description field is Character not found.\", function () {",
											"    const responseData = pm.response.json();",
											"  ",
											"    pm.expect(responseData.description).to.equal(\"Character not found.\");",
											"});",
											"",
											"",
											"pm.test(\"No unwanted JSON items are present\", function () {",
											"    const responseData = pm.response.json();",
											"  ",
											"    const allowedProperties = [\"error\", \"description\"];",
											"  ",
											"    Object.keys(responseData).forEach(function(key) {",
											"        pm.expect(allowedProperties).to.include(key);",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/hamstagram/Bobix",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"hamstagram",
										"Bobix"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Scénario 8: eliminations de representedBy Hamstagram",
					"item": [
						{
							"name": "Reset (init)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/reset",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"reset"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add character hamster(Claude)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Claude\",\r\n  \"type\": \"hamster\",\r\n  \"salary\": 200\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required field - turnNumber\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.turnNumber).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"turnNumber is a non-negative integer\", function() {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.turnNumber).to.be.a('number');",
											"    pm.expect(responseData.turnNumber).to.satisfy(function(value) {",
											"        return value >= 0;",
											"    }, \"Value should be a non-negative integer\");",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"",
											"pm.test(\"Verify that the response is not empty\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.not.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add character hamster (Bobix)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Bobix\",\r\n  \"type\": \"hamster\",\r\n  \"salary\": 200\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required field - turnNumber\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.turnNumber).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"turnNumber is a non-negative integer\", function() {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.turnNumber).to.be.a('number');",
											"    pm.expect(responseData.turnNumber).to.satisfy(function(value) {",
											"        return value >= 0;",
											"    }, \"Value should be a non-negative integer\");",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"",
											"pm.test(\"Verify that the response is not empty\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.not.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required field - turnNumber\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.turnNumber).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"turnNumber is a non-negative integer\", function() {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.turnNumber).to.be.a('number');",
											"    pm.expect(responseData.turnNumber).to.satisfy(function(value) {",
											"        return value >= 0;",
											"    }, \"Value should be a non-negative integer\");",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"",
											"pm.test(\"Verify that the response is not empty\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.not.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required field - turnNumber\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.turnNumber).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"turnNumber is a non-negative integer\", function() {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.turnNumber).to.be.a('number');",
											"    pm.expect(responseData.turnNumber).to.satisfy(function(value) {",
											"        return value >= 0;",
											"    }, \"Value should be a non-negative integer\");",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"",
											"pm.test(\"Verify that the response is not empty\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.not.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required field - turnNumber\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.turnNumber).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"turnNumber is a non-negative integer\", function() {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.turnNumber).to.be.a('number');",
											"    pm.expect(responseData.turnNumber).to.satisfy(function(value) {",
											"        return value >= 0;",
											"    }, \"Value should be a non-negative integer\");",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"",
											"pm.test(\"Verify that the response is not empty\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.not.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required field - turnNumber\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.turnNumber).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"turnNumber is a non-negative integer\", function() {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.turnNumber).to.be.a('number');",
											"    pm.expect(responseData.turnNumber).to.satisfy(function(value) {",
											"        return value >= 0;",
											"    }, \"Value should be a non-negative integer\");",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"",
											"pm.test(\"Verify that the response is not empty\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.not.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required field - turnNumber\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.turnNumber).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"turnNumber is a non-negative integer\", function() {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.turnNumber).to.be.a('number');",
											"    pm.expect(responseData.turnNumber).to.satisfy(function(value) {",
											"        return value >= 0;",
											"    }, \"Value should be a non-negative integer\");",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"",
											"pm.test(\"Verify that the response is not empty\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.not.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required field - turnNumber\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.turnNumber).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"turnNumber is a non-negative integer\", function() {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.turnNumber).to.be.a('number');",
											"    pm.expect(responseData.turnNumber).to.satisfy(function(value) {",
											"        return value >= 0;",
											"    }, \"Value should be a non-negative integer\");",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"",
											"pm.test(\"Verify that the response is not empty\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.not.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required field - turnNumber\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.turnNumber).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"turnNumber is a non-negative integer\", function() {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.turnNumber).to.be.a('number');",
											"    pm.expect(responseData.turnNumber).to.satisfy(function(value) {",
											"        return value >= 0;",
											"    }, \"Value should be a non-negative integer\");",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"",
											"pm.test(\"Verify that the response is not empty\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.not.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required field - turnNumber\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.turnNumber).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"turnNumber is a non-negative integer\", function() {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.turnNumber).to.be.a('number');",
											"    pm.expect(responseData.turnNumber).to.satisfy(function(value) {",
											"        return value >= 0;",
											"    }, \"Value should be a non-negative integer\");",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"",
											"pm.test(\"Verify that the response is not empty\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.not.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required field - turnNumber\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.turnNumber).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"turnNumber is a non-negative integer\", function() {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.turnNumber).to.be.a('number');",
											"    pm.expect(responseData.turnNumber).to.satisfy(function(value) {",
											"        return value >= 0;",
											"    }, \"Value should be a non-negative integer\");",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"",
											"pm.test(\"Verify that the response is not empty\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.not.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Hamstagram (Bobix)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Validate the username field is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"    ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.username).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Username should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"The nbFollowers field should be a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.nbFollowers).to.be.a('number');",
											"    pm.expect(responseData.nbFollowers).to.be.at.least(0);",
											"});",
											"",
											"",
											"pm.test(\"Check if username is Bobix\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.username).to.equal(\"Bobix\");",
											"});",
											"",
											"pm.test(\"Check if nbFollowers is 4600\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.nbFollowers).to.equal(4600);",
											"});",
											"",
											"",
											"pm.test(\"Check if representedBy is empty\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.representedBy).to.equal(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/hamstagram/Bobix",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"hamstagram",
										"Bobix"
									]
								}
							},
							"response": []
						},
						{
							"name": "Hamstagram (Claude) 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 404\", function () {",
											"  pm.expect(pm.response.code).to.equal(404);",
											"});",
											"",
											"pm.test(\"Error field is CHARACTER_NOT_FOUND\", function () {",
											"    const responseData = pm.response.json();",
											"  ",
											"    pm.expect(responseData.error).to.equal(\"CHARACTER_NOT_FOUND\");",
											"});",
											"",
											"pm.test(\"Description field is Character not found.\", function () {",
											"    const responseData = pm.response.json();",
											"  ",
											"    pm.expect(responseData.description).to.equal(\"Character not found.\");",
											"});",
											"",
											"",
											"pm.test(\"No unwanted JSON items are present\", function () {",
											"    const responseData = pm.response.json();",
											"  ",
											"    const allowedProperties = [\"error\", \"description\"];",
											"  ",
											"    Object.keys(responseData).forEach(function(key) {",
											"        pm.expect(allowedProperties).to.include(key);",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/hamstagram/Claude",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"hamstagram",
										"Claude"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required field - turnNumber\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.turnNumber).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"turnNumber is a non-negative integer\", function() {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.turnNumber).to.be.a('number');",
											"    pm.expect(responseData.turnNumber).to.satisfy(function(value) {",
											"        return value >= 0;",
											"    }, \"Value should be a non-negative integer\");",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"",
											"pm.test(\"Verify that the response is not empty\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.not.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "story4",
			"item": [
				{
					"name": "Scenario 1 : ajout de plusieurs films",
					"item": [
						{
							"name": "Reset (init)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/reset",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"reset"
									]
								}
							},
							"response": []
						},
						{
							"name": "Movie Rats of the caribbean",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"Rats of the Caribbean\",\r\n  \"type\": \"A\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/movies",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"movies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Movie Ratatouille",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"Ratatouille\",\r\n  \"type\": \"A\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/movies",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"movies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Validate the turnNumber field in the response\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.turnNumber).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Verify that turnNumber is a non-negative integer\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.turnNumber).to.exist;",
											"  pm.expect(responseData.turnNumber).to.be.a('number');",
											"  pm.expect(responseData.turnNumber).to.be.at.least(0);",
											"});",
											"",
											"",
											"",
											"pm.test(\"Verify that the response has the required fields\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.turnNumber).to.exist;",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Movies : Rats of the caribbean",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Response body is an array\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('array');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Only one movie is returned\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('array').and.to.have.lengthOf(1, \"Array length should be 1\");\r",
											"});\r",
											"pm.test(\"The first movie title is 'Rats of the Caribbean'\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('array').and.to.have.lengthOf.at.least(1);\r",
											"    \r",
											"    pm.expect(responseData[0].title).to.equal(\"Rats of the Caribbean\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Each movie has a non-empty title\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData).to.be.an('array').and.to.have.lengthOf.at.least(1);\r",
											"  \r",
											"  responseData.forEach(function(movie) {\r",
											"    pm.expect(movie.title).to.exist.and.to.have.lengthOf.at.least(1, \"Title should not be empty\");\r",
											"  });\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Each movie has a valid type\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
											"    \r",
											"    responseData.forEach(function(movie) {\r",
											"        pm.expect(movie.type).to.exist.and.to.be.a('string').and.to.not.be.empty;\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Each movie has a non-negative box office value\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
											"\r",
											"    responseData.forEach(function(movie) {\r",
											"        pm.expect(movie.boxOffice).to.be.a('number').and.to.be.at.least(0);\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Each movie has a potential casting array\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('array');\r",
											"\r",
											"    responseData.forEach(function (movie) {\r",
											"        pm.expect(movie.potentialCasting).to.exist.and.to.be.an('array');\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"Each movie has a casting array\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('array');\r",
											"\r",
											"    responseData.forEach(function (movie) {\r",
											"        pm.expect(movie.casting).to.exist.and.to.be.an('array');\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/movies",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"movies"
									]
								}
							},
							"response": []
						}
					],
					"description": "Correspond à l'exemple 1 de la story"
				},
				{
					"name": "Scenario 2 : Ajout de film et d’acteurs, salaire et bonus",
					"item": [
						{
							"name": "Reset (init)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/reset",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"reset"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Joe actor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Joe\",\r\n  \"type\": \"hamster\",\r\n  \"salary\": 2100000\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Bob actor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Bob\",\r\n  \"type\": \"hamster\",\r\n  \"salary\": 1100000\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Movie Ratman",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"Ratman\",\r\n  \"type\": \"A\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/movies",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"movies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Movies : no movies",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"No movies are returned\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('array').and.to.have.lengthOf(0, \"Array length should be 0\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/movies",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"movies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Validate the turnNumber field in the response\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.turnNumber).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Verify that turnNumber is a non-negative integer\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.turnNumber).to.exist;",
											"  pm.expect(responseData.turnNumber).to.be.a('number');",
											"  pm.expect(responseData.turnNumber).to.be.at.least(0);",
											"});",
											"",
											"",
											"",
											"pm.test(\"Verify that the response has the required fields\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.turnNumber).to.exist;",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Movies : ajouté",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"1 movie is returned\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('array').and.to.have.lengthOf(1, \"Array length should be 1\");\r",
											"});\r",
											"\r",
											"pm.test(\"potentialCasting should be empty\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[0];\r",
											"    pm.expect(movie.potentialCasting).to.be.an('array').and.to.have.lengthOf(0, \"Array length should be 0\");\r",
											"});\r",
											"\r",
											"pm.test(\"casting should be empty\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[0];\r",
											"    pm.expect(movie.casting).to.be.an('array').and.to.have.lengthOf(0, \"Array length should be 0\");\r",
											"});\r",
											"\r",
											"pm.test(\"boxOffice should be 0\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[0];\r",
											"    pm.expect(movie.boxOffice).to.equal(0, \"boxOffice should be 0\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/movies",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"movies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Validate the turnNumber field in the response\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.turnNumber).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Verify that turnNumber is a non-negative integer\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.turnNumber).to.exist;",
											"  pm.expect(responseData.turnNumber).to.be.a('number');",
											"  pm.expect(responseData.turnNumber).to.be.at.least(0);",
											"});",
											"",
											"",
											"",
											"pm.test(\"Verify that the response has the required fields\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.turnNumber).to.exist;",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Movies : casting",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"1 movie is returned\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('array').and.to.have.lengthOf(1, \"Array length should be 1\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"casting should be empty\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[0];\r",
											"    pm.expect(movie.casting).to.be.an('array').and.to.have.lengthOf(0, \"Array length should be 0\");\r",
											"});\r",
											"\r",
											"pm.test(\"potentialCasting includes Joe and Bob\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[0];\r",
											"    const potentialCasting = movie.potentialCasting;\r",
											"    \r",
											"    pm.expect(potentialCasting).to.be.an('array').that.includes('Joe', 'Bob');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/movies",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"movies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Validate the turnNumber field in the response\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.turnNumber).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Verify that turnNumber is a non-negative integer\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.turnNumber).to.exist;",
											"  pm.expect(responseData.turnNumber).to.be.a('number');",
											"  pm.expect(responseData.turnNumber).to.be.at.least(0);",
											"});",
											"",
											"",
											"",
											"pm.test(\"Verify that the response has the required fields\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.turnNumber).to.exist;",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Movies : filming",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"1 movie is returned\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('array').and.to.have.lengthOf(1, \"Array length should be 1\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"potentialCasting should be empty\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[0];\r",
											"    pm.expect(movie.potentialCasting).to.be.an('array').and.to.have.lengthOf(0, \"Array length should be 0\");\r",
											"});\r",
											"\r",
											"pm.test(\"casting includes Joe and Bob\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[0];\r",
											"    const casting = movie.casting;\r",
											"    \r",
											"    pm.expect(casting).to.be.an('array').that.includes('Joe', 'Bob');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/movies",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"movies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Validate the turnNumber field in the response\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.turnNumber).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Verify that turnNumber is a non-negative integer\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.turnNumber).to.exist;",
											"  pm.expect(responseData.turnNumber).to.be.a('number');",
											"  pm.expect(responseData.turnNumber).to.be.at.least(0);",
											"});",
											"",
											"",
											"",
											"pm.test(\"Verify that the response has the required fields\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.turnNumber).to.exist;",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Movies : screening",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"1 movie is returned\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('array').and.to.have.lengthOf(1, \"Array length should be 1\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"potentialCasting should be empty\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[0];\r",
											"    pm.expect(movie.potentialCasting).to.be.an('array').and.to.have.lengthOf(0, \"Array length should be 0\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"potentialCasting should be empty\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[0];\r",
											"    pm.expect(movie.potentialCasting).to.be.an('array').and.to.have.lengthOf(0, \"Array length should be 0\");\r",
											"});\r",
											"\r",
											"pm.test(\"casting should be empty\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[0];\r",
											"    pm.expect(movie.casting).to.be.an('array').and.to.have.lengthOf(0, \"Array length should be 0\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/movies",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"movies"
									]
								}
							},
							"response": []
						}
					],
					"description": "Correspond à l'exemple 2 de la story"
				},
				{
					"name": "Scenario 3 : Ajout de film et d’acteurs",
					"item": [
						{
							"name": "Reset (init)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/reset",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"reset"
									]
								}
							},
							"response": []
						},
						{
							"name": "Movie The Lord of the Chinchillas",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"The Lord of the Chinchillas\",\r\n  \"type\": \"A\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/movies",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"movies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Validate the turnNumber field in the response\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.turnNumber).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Verify that turnNumber is a non-negative integer\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.turnNumber).to.exist;",
											"  pm.expect(responseData.turnNumber).to.be.a('number');",
											"  pm.expect(responseData.turnNumber).to.be.at.least(0);",
											"});",
											"",
											"",
											"",
											"pm.test(\"Verify that the response has the required fields\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.turnNumber).to.exist;",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Movies : ajouté",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"1 movie is returned\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('array').and.to.have.lengthOf(1, \"Array length should be 1\");\r",
											"});\r",
											"\r",
											"pm.test(\"potentialCasting should be empty\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[0];\r",
											"    pm.expect(movie.potentialCasting).to.be.an('array').and.to.have.lengthOf(0, \"Array length should be 0\");\r",
											"});\r",
											"\r",
											"pm.test(\"casting should be empty\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[0];\r",
											"    pm.expect(movie.casting).to.be.an('array').and.to.have.lengthOf(0, \"Array length should be 0\");\r",
											"});\r",
											"\r",
											"pm.test(\"Box office of first movie should be 0\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[0];\r",
											"    pm.expect(movie.boxOffice).to.equal(0, \"Box office should be 0\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/movies",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"movies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Bob actor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Bob\",\r\n  \"type\": \"hamster\",\r\n  \"salary\": 1100000\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Movies : potentialCasting empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"1 movie is returned\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('array').and.to.have.lengthOf(1, \"Array length should be 1\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"casting should be empty\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[0];\r",
											"    pm.expect(movie.casting).to.be.an('array').and.to.have.lengthOf(0, \"Array length should be 0\");\r",
											"});\r",
											"\r",
											"pm.test(\"potentialCasting should be empty\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[0];\r",
											"    pm.expect(movie.potentialCasting).to.be.an('array').and.to.have.lengthOf(0, \"Array length should be 0\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/movies",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"movies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Movies : potentialCasting has Bob",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"1 movie is returned\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('array').and.to.have.lengthOf(1, \"Array length should be 1\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"potentialCasting should have Bob\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[0];\r",
											"    pm.expect(movie.potentialCasting).to.be.an('array').that.include(\"Bob\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"casting should be empty\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[0];\r",
											"    pm.expect(movie.casting).to.be.an('array').and.to.have.lengthOf(0, \"Array length should be 0\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/movies",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"movies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Joe actor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Joe\",\r\n  \"type\": \"hamster\",\r\n  \"salary\": 2100000\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Movies : potentialCasting has Bob only",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"1 movie is returned\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('array').and.to.have.lengthOf(1, \"Array length should be 1\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"potentialCasting should have Bob\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[0];\r",
											"    pm.expect(movie.potentialCasting).to.be.an('array').that.include(\"Bob\");\r",
											"});\r",
											"\r",
											"pm.test(\"potentialCasting should not have Joe\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[0];\r",
											"    pm.expect(movie.potentialCasting).to.be.an('array').that.not.includes(\"Joe\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"casting should be empty\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[0];\r",
											"    pm.expect(movie.casting).to.be.an('array').and.to.have.lengthOf(0, \"Array length should be 0\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/movies",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"movies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Movies : potentialCasting complete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"1 movie is returned\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('array').and.to.have.lengthOf(1, \"Array length should be 1\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"potentialCasting should have Bob and Joe\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[0];\r",
											"    pm.expect(movie.potentialCasting).to.be.an('array').that.include(\"Bob\", \"Joe\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"casting should be empty\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[0];\r",
											"    pm.expect(movie.casting).to.be.an('array').and.to.have.lengthOf(0, \"Array length should be 0\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/movies",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"movies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Movies : filming",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"1 movie is returned\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('array').and.to.have.lengthOf(1, \"Array length should be 1\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"potentialCasting should be empty\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[0];\r",
											"    pm.expect(movie.potentialCasting).to.be.an('array').and.to.have.lengthOf(0, \"Array length should be 0\");\r",
											"});\r",
											"\r",
											"pm.test(\"casting includes Joe and Bob\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[0];\r",
											"    const casting = movie.casting;\r",
											"    \r",
											"    pm.expect(casting).to.be.an('array').that.includes('Joe', 'Bob');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/movies",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"movies"
									]
								}
							},
							"response": []
						}
					],
					"description": "Correspond à l'exemple 3 de la story"
				},
				{
					"name": "Scenario 4 : Plusieurs films et plusieurs acteurs",
					"item": [
						{
							"name": "Reset (init)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/reset",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"reset"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Joe actor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Joe\",\r\n  \"type\": \"hamster\",\r\n  \"salary\": 10\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Bob actor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Bob\",\r\n  \"type\": \"hamster\",\r\n  \"salary\": 11\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Jane actor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Jane\",\r\n  \"type\": \"hamster\",\r\n  \"salary\": 12\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Sylvie actor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Sylvie\",\r\n  \"type\": \"hamster\",\r\n  \"salary\": 13\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Movies Chin City",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"Chin City\",\r\n  \"type\": \"B\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/movies",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"movies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Movies : potentialCasting empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"1 movie is returned\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('array').and.to.have.lengthOf(1, \"Array length should be 1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Chin City potentialCasting is empty\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[0];\r",
											"    pm.expect(movie.potentialCasting).to.be.an('array').and.to.have.lengthOf(0, \"Array length should be 0\");\r",
											"});\r",
											"\r",
											"pm.test(\"Chin City casting should be empty\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[0];\r",
											"     pm.expect(movie.casting).to.be.an('array').and.to.have.lengthOf(0, \"Array length should be 0\");\r",
											"});\r",
											"\r",
											"pm.test(\"Chin City box-office should be 0\", function() {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[0];\r",
											"    pm.expect(movie.boxOffice).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/movies",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"movies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Les dents des rongeurs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"Les dents des rongeurs\",\r\n  \"type\": \"B\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/movies",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"movies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Movies : potentialCasting Chin City contain actors",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Chin City potentialCasting should have Joe, Bob, Jane, Sylvie\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[0];\r",
											"    pm.expect(movie.potentialCasting).to.be.an('array').that.include(\"Joe\",\"Bob\",\"Jane\",\"Sylvie\");\r",
											"});\r",
											"\r",
											"pm.test(\"Chin City casting should be empty\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[0];\r",
											"    pm.expect(movie.casting).to.be.an('array').and.to.have.lengthOf(0, \"Array length should be 0\");\r",
											"});\r",
											"\r",
											"pm.test(\"Chin City box-office should be 0\", function() {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[0];\r",
											"    pm.expect(movie.boxOffice).to.equal(0);\r",
											"});\r",
											"\r",
											"pm.test(\"Les dents des rongeurs potentialCasting should be empty\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[1];\r",
											"    pm.expect(movie.potentialCasting).to.be.an('array').and.to.have.lengthOf(0, \"Array length should be 0\");\r",
											"});\r",
											"\r",
											"pm.test(\"Les dents des rongeurs casting should be empty\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[1];\r",
											"    pm.expect(movie.casting).to.be.an('array').and.to.have.lengthOf(0, \"Array length should be 0\");\r",
											"});\r",
											"\r",
											"pm.test(\"Les dents des rongeurs box-office should be 0\", function() {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[1];\r",
											"    pm.expect(movie.boxOffice).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/movies",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"movies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Movies : Chin City contain casting",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Chin city casting should have Bob, Jane\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[0];\r",
											"    pm.expect(movie.casting).to.be.an('array').that.include(\"Bob\",\"Jane\");\r",
											"});\r",
											"\r",
											"pm.test(\"Les dents des rongeurs potential casting should have Jane, Sylvie\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[1];\r",
											"    pm.expect(movie.potentialCasting).to.be.an('array').that.include(\"Jane\",\"Sylvie\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/movies",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"movies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Movie The Lord of The Chinchillas",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"The Lord of the Chinchillas\",\r\n  \"type\": \"A\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/movies",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"movies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Movies : Chin City a l'affiche",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Chin City potentialCasting should be empty\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[0];\r",
											"    pm.expect(movie.potentialCasting).to.be.an('array').and.to.have.lengthOf(0, \"Array length should be 0\");\r",
											"});\r",
											"\r",
											"pm.test(\"Chin City casting should be empty\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[0];\r",
											"    pm.expect(movie.casting).to.be.an('array').and.to.have.lengthOf(0, \"Array length should be 0\");\r",
											"});\r",
											"\r",
											"pm.test(\"Les dents des rongeurs potentialCasting should be empty\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[1];\r",
											"    pm.expect(movie.potentialCasting).to.be.an('array').and.to.have.lengthOf(0, \"Array length should be 0\");\r",
											"});\r",
											"\r",
											"pm.test(\"Les dents des rongeurs casting should contain Jane and Sylvie\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[1];\r",
											"    pm.expect(movie.casting).to.be.an('array').that.include(\"Jane\",\"Sylvie\");\r",
											"});\r",
											"\r",
											"pm.test(\"Les dents des rongeurs box-office should be 0\", function() {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[1];\r",
											"    pm.expect(movie.boxOffice).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/movies",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"movies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Movies : Chin City contain gain au box office",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Chin City potentialCasting should be empty\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[0];\r",
											"    pm.expect(movie.casting).to.be.an('array').and.to.have.lengthOf(0, \"Array length should be 0\");\r",
											"});\r",
											"\r",
											"pm.test(\"Chin City casting should be empty\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[0];\r",
											"    pm.expect(movie.casting).to.be.an('array').and.to.have.lengthOf(0, \"Array length should be 0\");\r",
											"});\r",
											"\r",
											"pm.test(\"Les dents des rongeurs potentialCasting should be empty\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[1];\r",
											"    pm.expect(movie.casting).to.be.an('array').and.to.have.lengthOf(0, \"Array length should be 0\");\r",
											"});\r",
											"\r",
											"pm.test(\"Les dents des rongeurs casting should be empty\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[1];\r",
											"    pm.expect(movie.casting).to.be.an('array').and.to.have.lengthOf(0, \"Array length should be 0\");\r",
											"});\r",
											"\r",
											"pm.test(\"Les dents des rongeurs box-office should be 0\", function() {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[1];\r",
											"    pm.expect(movie.boxOffice).to.equal(0);\r",
											"});\r",
											"\r",
											"pm.test(\"The Lord of The Chinchillas potentialCasting should contain Joe, Bob, Jane and Sylvie\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[2];\r",
											"    pm.expect(movie.potentialCasting).to.be.an('array').that.include(\"Joe\", \"Bob\", \"Jane\", \"Sylvie\");\r",
											"});\r",
											"\r",
											"pm.test(\"The Hamster Games box-office should be 0\", function() {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[2];\r",
											"    pm.expect(movie.boxOffice).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/movies",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"movies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Movies : The Lord of the Chinchillas contains casting",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Chin City potentialCasting should be empty\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[0];\r",
											"    pm.expect(movie.casting).to.be.an('array').and.to.have.lengthOf(0, \"Array length should be 0\");\r",
											"});\r",
											"\r",
											"pm.test(\"Chin City casting should be empty\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[0];\r",
											"    pm.expect(movie.casting).to.be.an('array').and.to.have.lengthOf(0, \"Array length should be 0\");\r",
											"});\r",
											"\r",
											"pm.test(\"Les dents des rongeurs potentialCasting should be empty\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[1];\r",
											"    pm.expect(movie.casting).to.be.an('array').and.to.have.lengthOf(0, \"Array length should be 0\");\r",
											"});\r",
											"\r",
											"pm.test(\"Les dents des rongeurs casting should be empty\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[1];\r",
											"    pm.expect(movie.casting).to.be.an('array').and.to.have.lengthOf(0, \"Array length should be 0\");\r",
											"});\r",
											"\r",
											"pm.test(\"The Lord of the Chinchillas potentialCasting should be empty\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[2];\r",
											"    pm.expect(movie.potentialCasting).to.be.an('array').and.to.have.lengthOf(0, \"Array length should be 0\");\r",
											"});\r",
											"\r",
											"pm.test(\"The Lord of the Chinchillas casting should contains Joe and Bob\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[2];\r",
											"    pm.expect(movie.casting).to.be.an('array').that.include(\"Joe\",\"Bob\");\r",
											"});\r",
											"\r",
											"pm.test(\"The Lord of the Chinchillas box-office should be 0\", function() {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[2];\r",
											"    pm.expect(movie.boxOffice).to.equal(0);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/movies",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"movies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						}
					],
					"description": "Pour le casting de The Lord of the Chinchillas :\n\nTour 9, le ratio est approximativement :\n\n- Joe : 520\n- Bob : 527\n- Jane : 483\n- Sylvie : 446"
				},
				{
					"name": "Scénario 5 : Calcul des gains au box office",
					"item": [
						{
							"name": "Reset (init)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/reset",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"reset"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Bob actor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Bob\",\r\n  \"type\": \"hamster\",\r\n  \"salary\": 10\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Johny agent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Johny\",\r\n  \"type\": \"chinchilla\",\r\n  \"salary\": 12\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Jane actor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Jane\",\r\n  \"type\": \"hamster\",\r\n  \"salary\": 11\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Movie The Lord of The Chinchillas",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"The Lord of the Chinchillas\",\r\n  \"type\": \"A\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/movies",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"movies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Movies : Chin City contain gain au box office",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"The Lord of the Chinchillas box-office should be 692000\", function() {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[0];\r",
											"    pm.expect(movie.boxOffice).to.equal(692000);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/movies",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"movies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Scénario 6 : 3 films + 5 acteurs",
					"item": [
						{
							"name": "Reset (init)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/reset",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"reset"
									]
								}
							},
							"response": []
						},
						{
							"name": "Movies Chin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"Chin City\",\r\n  \"type\": \"B\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/movies",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"movies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Movies Ratatouille",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"Ratatouille\",\r\n  \"type\": \"B\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/movies",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"movies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Movies Ratémon",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"Ratémon\",\r\n  \"type\": \"B\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/movies",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"movies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Sylvie actor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Sylvie\",\r\n  \"type\": \"hamster\",\r\n  \"salary\": 10\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Bobix actor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Bobix\",\r\n  \"type\": \"hamster\",\r\n  \"salary\": 20\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Loïs actor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Loïs\",\r\n  \"type\": \"hamster\",\r\n  \"salary\": 30\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Laris actor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Laris\",\r\n  \"type\": \"hamster\",\r\n  \"salary\": 40\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Fab actor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Fab\",\r\n  \"type\": \"hamster\",\r\n  \"salary\": 50\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Movies",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Chin city potentialCasting should have Sylvie, Bobix, Loïs, Laris, Fab\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[0];\r",
											"    pm.expect(movie.potentialCasting).to.be.an('array').that.include(\"Sylvie\",\"Bobix\",\"Loïs\",\"Laris\",\"Fab\");\r",
											"});\r",
											"\r",
											"pm.test(\"Ratatouille potentialCasting should have Sylvie, Bobix, Loïs, Laris, Fab\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[1];\r",
											"    pm.expect(movie.potentialCasting).to.be.an('array').that.include(\"Sylvie\",\"Bobix\",\"Loïs\",\"Laris\",\"Fab\");\r",
											"});\r",
											"\r",
											"pm.test(\"Ratémon potentialCasting should have Sylvie, Bobix, Loïs, Laris, Fab\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[2];\r",
											"    pm.expect(movie.potentialCasting).to.be.an('array').that.include(\"Sylvie\",\"Bobix\",\"Loïs\",\"Laris\",\"Fab\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/movies",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"movies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Movies : Ratémon has no casting",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Chin city casting should have Sylvie, Bobix\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[0];\r",
											"    pm.expect(movie.casting).to.be.an('array').that.include(\"Sylvie\",\"Bobix\");\r",
											"});\r",
											"\r",
											"pm.test(\"Ratatouille casting should have Loïs, Laris\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[1];\r",
											"    pm.expect(movie.casting).to.be.an('array').that.include(\"Loïs\",\"Laris\");\r",
											"});\r",
											"\r",
											"pm.test(\"Ratémon casting should be empty\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[2];\r",
											"     pm.expect(movie.casting).to.be.an('array').and.to.have.lengthOf(0, \"Array length should be 0\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Ratémon potentialCasting should have Fab\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[2];\r",
											"    pm.expect(movie.potentialCasting).to.be.an('array').that.include(\"Fab\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/movies",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"movies"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Scénario 7 : Élimination caracter dans potential casting",
					"item": [
						{
							"name": "Reset (init)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/reset",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"reset"
									]
								}
							},
							"response": []
						},
						{
							"name": "Movies Chin City",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"Chin City\",\r\n  \"type\": \"B\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/movies",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"movies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Movies Ratatouille",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"Ratatouille\",\r\n  \"type\": \"B\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/movies",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"movies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Sylvie actor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Sylvie\",\r\n  \"type\": \"hamster\",\r\n  \"salary\": 10\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Bobix actor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Bobix\",\r\n  \"type\": \"hamster\",\r\n  \"salary\": 20\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Loïs actor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Loïs\",\r\n  \"type\": \"hamster\",\r\n  \"salary\": 30\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Laris actor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Laris\",\r\n  \"type\": \"hamster\",\r\n  \"salary\": 40\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Fab actor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Fab\",\r\n  \"type\": \"hamster\",\r\n  \"salary\": 50\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Movies Ratémon",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"Ratémon\",\r\n  \"type\": \"B\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/movies",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"movies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Movies : Ratémon has no potential casting",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Chin city potentialCasting should be empty\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[0];\r",
											"    pm.expect(movie.potentialCasting).to.be.an('array').and.to.have.lengthOf(0, \"Array length should be 0\");\r",
											"});\r",
											"\r",
											"pm.test(\"Ratatouille potentialCasting should be empty\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[1];\r",
											"    pm.expect(movie.potentialCasting).to.be.an('array').and.to.have.lengthOf(0, \"Array length should be 0\");\r",
											"});\r",
											"\r",
											"pm.test(\"Ratémon potentialCasting should be empty\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[2];\r",
											"    pm.expect(movie.potentialCasting).to.be.an('array').and.to.have.lengthOf(0, \"Array length should be 0\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/movies",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"movies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Character (Fab) : not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 404\", function () {\r",
											"  pm.expect(pm.response.code).to.equal(404);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Error field is CHARACTER_NOT_FOUND\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"  \r",
											"    pm.expect(responseData.error).to.equal(\"CHARACTER_NOT_FOUND\");\r",
											"});\r",
											"\r",
											"pm.test(\"Description field is Character not found.\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"  \r",
											"    pm.expect(responseData.description).to.equal(\"Character not found.\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"No unwanted JSON items are present\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"  \r",
											"    const allowedProperties = [\"error\", \"description\"];\r",
											"  \r",
											"    Object.keys(responseData).forEach(function(key) {\r",
											"        pm.expect(allowedProperties).to.include(key);\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/characters/Fab",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters",
										"Fab"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Scénario 8 : Élimination 1 caracter dans casting alors 1 character restant",
					"item": [
						{
							"name": "Reset (init)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/reset",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"reset"
									]
								}
							},
							"response": []
						},
						{
							"name": "Movies Chin City",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"Chin City\",\r\n  \"type\": \"B\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/movies",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"movies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Sylvie actor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Sylvie\",\r\n  \"type\": \"hamster\",\r\n  \"salary\": 10\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Bobix actor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Bobix\",\r\n  \"type\": \"hamster\",\r\n  \"salary\": 20\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Loïs actor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Loïs\",\r\n  \"type\": \"hamster\",\r\n  \"salary\": 30\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Laris actor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Laris\",\r\n  \"type\": \"hamster\",\r\n  \"salary\": 40\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Fab actor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Fab\",\r\n  \"type\": \"hamster\",\r\n  \"salary\": 50\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Movies Ratémon",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"Ratémon\",\r\n  \"type\": \"B\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/movies",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"movies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Character (Sylvie) : not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 404\", function () {\r",
											"  pm.expect(pm.response.code).to.equal(404);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Error field is CHARACTER_NOT_FOUND\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"  \r",
											"    pm.expect(responseData.error).to.equal(\"CHARACTER_NOT_FOUND\");\r",
											"});\r",
											"\r",
											"pm.test(\"Description field is Character not found.\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"  \r",
											"    pm.expect(responseData.description).to.equal(\"Character not found.\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"No unwanted JSON items are present\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"  \r",
											"    const allowedProperties = [\"error\", \"description\"];\r",
											"  \r",
											"    Object.keys(responseData).forEach(function(key) {\r",
											"        pm.expect(allowedProperties).to.include(key);\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/characters/Sylvie",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters",
										"Sylvie"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Movies : Ratémon casting contains only Bobix",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Ratémon casting should have Bobix and Loïs\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[1];\r",
											"    pm.expect(movie.casting).to.be.an('array').that.include(\"Bobix\",\"Loïs\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/movies",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"movies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Movies : Ratémon screening (no casting)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Ratémon potentialCasting should be empty\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[0];\r",
											"    pm.expect(movie.potentialCasting).to.be.an('array').and.to.have.lengthOf(0, \"Array length should be 0\");\r",
											"});\r",
											"\r",
											"pm.test(\"Ratémon casting should be empty\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[1];\r",
											"    pm.expect(movie.casting).to.be.an('array').and.to.have.lengthOf(0, \"Array length should be 0\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/movies",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"movies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Movies : Ratémon boxOffice",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Ratémon potentialCasting should be empty\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[1];\r",
											"    pm.expect(movie.potentialCasting).to.be.an('array').and.to.have.lengthOf(0, \"Array length should be 0\");\r",
											"});\r",
											"\r",
											"pm.test(\"Ratémon casting should be empty\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[1];\r",
											"    pm.expect(movie.casting).to.be.an('array').and.to.have.lengthOf(0, \"Array length should be 0\");\r",
											"});\r",
											"\r",
											"pm.test(\"Ratémon box-office should be 592000\", function() {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[1];\r",
											"    pm.expect(movie.boxOffice).to.equal(592000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/movies",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"movies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Scénario 9 : Movie A Sélection d'acteurs",
					"item": [
						{
							"name": "Reset (init)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/reset",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"reset"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Sylvie actor (high ratio)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Sylvie\",\r\n  \"type\": \"hamster\",\r\n  \"salary\": 10\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Bobix actor (average ratio)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Bobix\",\r\n  \"type\": \"hamster\",\r\n  \"salary\": 20\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Loïs actor (low ratio)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Loïs\",\r\n  \"type\": \"hamster\",\r\n  \"salary\": 100\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Movies Chin City Movie A",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"Chin City\",\r\n  \"type\": \"A\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/movies",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"movies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Movies : Chin City",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Chin city casting should have Sylvie, Bobix\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[0];\r",
											"    pm.expect(movie.casting).to.be.an('array').that.include(\"Sylvie\",\"Bobix\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/movies",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"movies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Scenario 10 : Salaire mep",
					"item": [
						{
							"name": "Reset",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/reset",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"reset"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Hamster A",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Bobix\",\r\n  \"type\": \"hamster\",\r\n  \"salary\": 600\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Hamster B",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Sylvia\",\r\n  \"type\": \"hamster\",\r\n  \"salary\": 300\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Movie type B",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"Noam et Tom, amis pour la vie\",\r\n  \"type\": \"B\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/movies",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"movies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Hamster A",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Bank balance is 1300\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData.bankBalance).to.equal(1300);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/characters/Bobix",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters",
										"Bobix"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						}
					],
					"description": "Le scénario des pourcentages manquants à la mep 3"
				}
			]
		},
		{
			"name": "story5",
			"item": [
				{
					"name": "Scenario 1: Promouvoir film",
					"item": [
						{
							"name": "Reset (init)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/reset",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"reset"
									]
								}
							},
							"response": []
						},
						{
							"name": "Movie Rats of the caribbean",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"Rats of the Caribbean\",\r\n  \"type\": \"A\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/movies",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"movies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Joe actor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Joe\",\r\n  \"type\": \"hamster\",\r\n  \"salary\": 2100000\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Bob actor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Bob\",\r\n  \"type\": \"hamster\",\r\n  \"salary\": 1100000\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Johny agent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Johny\",\r\n  \"type\": \"chinchilla\",\r\n  \"salary\": 12\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Gossip",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from\": \"Joe\", \r\n  \"to\": \"Bob\",\r\n  \"actionCode\": \"SC\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/actions",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"actions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Character Bob",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.name).to.exist.and.to.be.a('string');",
											"    pm.expect(responseData.type).to.exist.and.to.be.a('string');",
											"    pm.expect(responseData.reputationScore).to.exist.and.to.be.a('number');",
											"    pm.expect(responseData.bankBalance).to.exist.and.to.be.a('number');",
											"});",
											"",
											"",
											"pm.test(\"Name is a non-empty string\", function() {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Type is a non-empty string\", function() {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Reputation score is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.reputationScore).to.be.a('number');",
											"    pm.expect(responseData.reputationScore).to.be.at.least(0);",
											"});",
											"",
											"",
											"pm.test(\"Bank balance is a non-negative number\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.bankBalance).to.be.a('number');",
											"    pm.expect(responseData.bankBalance).to.be.at.least(0, \"Bank balance should be a non-negative number\");",
											"});",
											"",
											"",
											"pm.test(\"Verify that the response time is within an acceptable range\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"",
											"pm.test(\"Validate that the 'name' field is not empty and is a string\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.name).to.exist.and.to.be.a('string').and.to.not.be.empty;",
											"});",
											"",
											"",
											"pm.test(\"Validate that the 'type' field is not empty and is a string\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Validate that the reputationScore field is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.reputationScore).to.be.a('number');",
											"    pm.expect(responseData.reputationScore).to.be.at.least(0, \"reputationScore should be a non-negative integer\");",
											"});",
											"",
											"",
											"pm.test(\"Validate bankBalance field is a non-negative number\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.bankBalance).to.be.a('number');",
											"    pm.expect(responseData.bankBalance).to.be.at.least(0);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/characters/Bob",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters",
										"Bob"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Gossip",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from\": \"Joe\", \r\n  \"to\": \"Bob\",\r\n  \"actionCode\": \"SC\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/actions",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"actions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Gossip",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from\": \"Joe\", \r\n  \"to\": \"Bob\",\r\n  \"actionCode\": \"SC\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/actions",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"actions"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Scénario 2 : Scandal actor",
					"item": [
						{
							"name": "Reset (init)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/reset",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"reset"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Bob actor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Bob\",\r\n  \"type\": \"hamster\",\r\n  \"salary\": 1100000\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Joe actor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Joe\",\r\n  \"type\": \"hamster\",\r\n  \"salary\": 2100000\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Movie Rats of the caribbean",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"Rats of the Caribbean\",\r\n  \"type\": \"A\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/movies",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"movies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Movies : Rats of the caribbean",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Rats of the caribbean potential casting should have Bob\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[0];\r",
											"    pm.expect(movie.potentialCasting).to.be.an('array').that.include(\"Bob\");\r",
											"});\r",
											"\r",
											"pm.test(\"Rats of the caribbean potential casting should have Joe\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[0];\r",
											"    pm.expect(movie.potentialCasting).to.be.an('array').that.include(\"Joe\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/movies",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"movies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Scandal",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from\": \"Bob\", \r\n  \"to\": \"Joe\",\r\n  \"actionCode\": \"SC\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/actions",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"actions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Movies : Rats of the caribbean",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Rats of the caribbean potential casting should have Bob\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[0];\r",
											"    pm.expect(movie.potentialCasting).to.be.an('array').that.not.include(\"Bob\");\r",
											"});\r",
											"\r",
											"pm.test(\"Rats of the caribbean potential casting should not have Joe\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[0];\r",
											"    pm.expect(movie.potentialCasting).to.be.an('array').that.not.include(\"Joe\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/movies",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"movies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Character (Joe)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Reputation score is 53\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData.reputationScore).to.equal(53);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/characters/Joe",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters",
										"Joe"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Hamstagram (Joe)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Check if nbFollowers is 5280\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.nbFollowers).to.equal(5280);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/hamstagram/Joe",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"hamstagram",
										"Joe"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Movies : Rats of the caribbean",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Rats of the caribbean potential casting should not have Bob\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[0];\r",
											"    pm.expect(movie.potentialCasting).to.be.an('array').that.not.include(\"Bob\");\r",
											"});\r",
											"\r",
											"pm.test(\"Rats of the caribbean potential casting should not have Joe\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[0];\r",
											"    pm.expect(movie.potentialCasting).to.be.an('array').that.not.include(\"Joe\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/movies",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"movies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Movies : Rats of the caribbean",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Rats of the caribbean potential casting should not have Bob\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[0];\r",
											"    pm.expect(movie.potentialCasting).to.be.an('array').that.not.include(\"Bob\");\r",
											"});\r",
											"\r",
											"pm.test(\"Rats of the caribbean potential casting should have Joe\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[0];\r",
											"    pm.expect(movie.potentialCasting).to.be.an('array').that.include(\"Joe\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/movies",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"movies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Scénario 3 : Scandal non prérequis",
					"item": [
						{
							"name": "Reset (init)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/reset",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"reset"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Bob actor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Bob\",\r\n  \"type\": \"hamster\",\r\n  \"salary\": 1100000\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Joe actor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Joe\",\r\n  \"type\": \"hamster\",\r\n  \"salary\": 2100000\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Scandal",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from\": \"Bob\", \r\n  \"to\": \"Joe\",\r\n  \"actionCode\": \"SC\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/actions",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"actions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Character (Joe)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Reputation score is 57\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData.reputationScore).to.equal(57);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/characters/Joe",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters",
										"Joe"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Scenario 4 : RealityShow (Movie)",
					"item": [
						{
							"name": "Reset (init)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/reset",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"reset"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Joe actor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Joe\",\r\n  \"type\": \"hamster\",\r\n  \"salary\": 2100000\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Bob actor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Bob\",\r\n  \"type\": \"hamster\",\r\n  \"salary\": 1100000\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Movie Rats of the caribbean",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"Rats of the Caribbean\",\r\n  \"type\": \"A\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/movies",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"movies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Movies : Rats of the caribbean",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Rats of the caribbean potentialCasting should be empty\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[0];\r",
											"    pm.expect(movie.potentialCasting).to.be.an('array').and.to.have.lengthOf(0, \"Array length should be 0\");\r",
											"});\r",
											"\r",
											"pm.test(\"Rats of the caribbean casting should be empty\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[0];\r",
											"    pm.expect(movie.casting).to.be.an('array').and.to.have.lengthOf(0, \"Array length should be 0\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/movies",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"movies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send RealityShow",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from\": \"Joe\", \r\n  \"to\": null,\r\n  \"actionCode\": \"RS\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/actions",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"actions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Movies : Rats of the caribbean",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Rats of the caribbean potential casting should have Bob\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[0];\r",
											"    pm.expect(movie.potentialCasting).to.be.an('array').that.include(\"Bob\");\r",
											"});\r",
											"\r",
											"pm.test(\"Rats of the caribbean potential casting should not have Joe\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[0];\r",
											"    pm.expect(movie.potentialCasting).to.be.an('array').that.not.include(\"Joe\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/movies",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"movies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Movies : Rats of the caribbean",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Rats of the caribbean potential casting should have Bob\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[0];\r",
											"    pm.expect(movie.potentialCasting).to.be.an('array').that.include(\"Bob\");\r",
											"});\r",
											"\r",
											"pm.test(\"Rats of the caribbean potential casting should not have Joe\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[0];\r",
											"    pm.expect(movie.potentialCasting).to.be.an('array').that.not.include(\"Joe\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/movies",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"movies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Movies : Rats of the caribbean",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Rats of the caribbean potential casting should have Bob\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[0];\r",
											"    pm.expect(movie.potentialCasting).to.be.an('array').that.include(\"Bob\");\r",
											"});\r",
											"\r",
											"pm.test(\"Rats of the caribbean potential casting should have Joe\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[0];\r",
											"    pm.expect(movie.potentialCasting).to.be.an('array').that.include(\"Joe\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/movies",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"movies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Movies : Rats of the caribbean",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Rats of the caribbean casting should have Joe, Bob\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[0];\r",
											"    pm.expect(movie.casting).to.be.an('array').that.include(\"Joe\").include(\"Bob\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/movies",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"movies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Scenario 5 : RealityShow (HamstagramAccount)",
					"item": [
						{
							"name": "Reset (init)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/reset",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"reset"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Bob agent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Bob\",\r\n  \"type\": \"chinchilla\",\r\n  \"salary\": 100\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Joe actor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Joe\",\r\n  \"type\": \"hamster\",\r\n  \"salary\": 100\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Hamstagram (Bob)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check if 'Joe' is in the represent field\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.represent).to.be.an('array').that.includes('Joe');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/hamstagram/Bob",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"hamstagram",
										"Bob"
									]
								}
							},
							"response": []
						},
						{
							"name": "Hamstagram (Joe)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check if representedBy is Bob\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.representedBy).to.equal(\"Bob\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/hamstagram/Joe",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"hamstagram",
										"Joe"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send RealityShow",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from\": \"Bob\", \r\n  \"to\": null,\r\n  \"actionCode\": \"RS\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/actions",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"actions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Hamstagram (Bob)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check if represent field from Joe doesn't contain Bob\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.represent).to.be.an('array').and.to.not.include('Bob');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/hamstagram/Bob",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"hamstagram",
										"Bob"
									]
								}
							},
							"response": []
						},
						{
							"name": "Hamstagram (Joe)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check if representedBy is empty\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.representedBy).to.equal(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/hamstagram/Joe",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"hamstagram",
										"Joe"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Hamstagram (Bob)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check if represent field from Joe doesn't contain Bob\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.represent).to.be.an('array').and.to.not.include('Bob');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/hamstagram/Bob",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"hamstagram",
										"Bob"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Hamstagram (Bob)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check if 'Joe' is in the represent field\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.represent).to.be.an('array').that.includes('Joe');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/hamstagram/Bob",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"hamstagram",
										"Bob"
									]
								}
							},
							"response": []
						},
						{
							"name": "Hamstagram (Joe)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check if representedBy is Bob\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.representedBy).to.equal(\"Bob\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/hamstagram/Joe",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"hamstagram",
										"Joe"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Scénario 6 : HarassmentComplaint remove from movie",
					"item": [
						{
							"name": "Reset (init)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/reset",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"reset"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Bob actor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Bob\",\r\n  \"type\": \"hamster\",\r\n  \"salary\": 100\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Joe actor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Joe\",\r\n  \"type\": \"hamster\",\r\n  \"salary\": 100\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Movie Rats of the caribbean Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"Rats of the Caribbean\",\r\n  \"type\": \"A\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/movies",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"movies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Movies : Rats of the caribbean",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Rats of the caribbean potential casting should have Bob and Joe\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[0];\r",
											"    pm.expect(movie.potentialCasting).to.be.an('array').that.include(\"Bob\", \"Joe\");\r",
											"});\r",
											"\r",
											"pm.test(\"Rats of the caribbean casting should be empty\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[0];\r",
											"     pm.expect(movie.casting).to.be.an('array').and.to.have.lengthOf(0, \"Array length should be 0\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/movies",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"movies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Harassment Complaint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from\": \"Bob\", \r\n  \"to\": \"Joe\",\r\n  \"actionCode\": \"PL\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/actions",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"actions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Movies : Rats of the caribbean",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Rats of the caribbean potential casting should not have Bob\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[0];\r",
											"    pm.expect(movie.potentialCasting).to.be.an('array').not.that.include(\"Bob\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/movies",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"movies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Character (Joe) : rep-10",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Reputation is 53\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"  \r",
											"    pm.expect(responseData.reputationScore).to.equal(53);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/characters/Joe",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters",
										"Joe"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Hamstagram (Joe) : nbfollowers-70%",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Followers number is 2640\", function () {",
											"    const responseData = pm.response.json();",
											"  ",
											"    pm.expect(responseData.nbFollowers).to.equal(2640);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/hamstagram/Joe",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"hamstagram",
										"Joe"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						}
					],
					"description": "\\- orchestration : élimination après perte de réputation des actions"
				},
				{
					"name": "Scénario 7 : HarassmentComplaint reselected in movie",
					"item": [
						{
							"name": "Reset (init)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/reset",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"reset"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Bob actor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Bob\",\r\n  \"type\": \"hamster\",\r\n  \"salary\": 100\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Joe actor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Joe\",\r\n  \"type\": \"hamster\",\r\n  \"salary\": 100\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Movie Rats of the caribbean Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"Rats of the Caribbean\",\r\n  \"type\": \"A\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/movies",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"movies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Harassment Complaint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from\": \"Bob\", \r\n  \"to\": \"Joe\",\r\n  \"actionCode\": \"PL\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/actions",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"actions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Movies : Rats of the caribbean",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Rats of the caribbean potential casting should have Bob\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[0];\r",
											"    pm.expect(movie.potentialCasting).to.be.an('array').empty;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/movies",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"movies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Movies : Rats of the caribbean",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Rats of the caribbean potential casting should have Bob\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[0];\r",
											"    pm.expect(movie.potentialCasting).to.be.an('array').empty;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/movies",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"movies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Movies : Rats of the caribbean",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Rats of the caribbean potential casting should have Bob and Joe\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[0];\r",
											"    pm.expect(movie.potentialCasting).to.be.an('array').that.include(\"Joe\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/movies",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"movies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						}
					],
					"description": "\\- orchestration : élimination après perte de réputation des actions"
				},
				{
					"name": "Scénario 8 : HarassmentComplaint agent",
					"item": [
						{
							"name": "Reset (init)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/reset",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"reset"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Bob avocat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Bob\",\r\n  \"type\": \"rat\",\r\n  \"salary\": 100\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Robin acteur",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Robin\",\r\n  \"type\": \"hamster\",\r\n  \"salary\": 100\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Joe agent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Joe\",\r\n  \"type\": \"chinchilla\",\r\n  \"salary\": 100\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Harassment Complaint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from\": \"Bob\", \r\n  \"to\": \"Joe\",\r\n  \"actionCode\": \"PL\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/actions",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"actions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Hamstagram (Joe)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Joe represent should be empty\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"     pm.expect(responseData.represent).to.be.an('array').and.to.have.lengthOf(0, \"Array length should be 0\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/hamstagram/Joe",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"hamstagram",
										"Joe"
									]
								}
							},
							"response": []
						},
						{
							"name": "Hamstagram (Robin)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Check if representedBy is empty\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.representedBy).to.equal(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/hamstagram/Robin",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"hamstagram",
										"Robin"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Hamstagram (Joe)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Joe represent should be empty\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"     pm.expect(responseData.represent).to.be.an('array').and.to.have.lengthOf(0, \"Array length should be 0\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/hamstagram/Joe",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"hamstagram",
										"Joe"
									]
								}
							},
							"response": []
						},
						{
							"name": "Hamstagram (Robin)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Check if representedBy is empty\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.representedBy).to.equal(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/hamstagram/Robin",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"hamstagram",
										"Robin"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Hamstagram (Robin)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Check if representedBy is Joe\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.representedBy).to.equal(\"Joe\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/hamstagram/Robin",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"hamstagram",
										"Robin"
									]
								}
							},
							"response": []
						},
						{
							"name": "Hamstagram (Joe)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Joe represent should contain Robin\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"     pm.expect(responseData.represent).to.be.an('array').that.include(\"Robin\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/hamstagram/Joe",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"hamstagram",
										"Joe"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						}
					],
					"description": "\\- sabotage agent"
				},
				{
					"name": "Scénario 9 : HarassmentComplaint prérequis",
					"item": [
						{
							"name": "Reset (init)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/reset",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"reset"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Bob avocat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Bob\",\r\n  \"type\": \"rat\",\r\n  \"salary\": 100\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Robin acteur",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Robin\",\r\n  \"type\": \"hamster\",\r\n  \"salary\": 100\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Joe agent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Joe\",\r\n  \"type\": \"chinchilla\",\r\n  \"salary\": 100\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send False Gossip",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from\": \"Bob\", \r\n  \"to\": \"Robin\",\r\n  \"actionCode\": \"FR\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/actions",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"actions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Harassment Complaint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from\": \"Bob\", \r\n  \"to\": \"Joe\",\r\n  \"actionCode\": \"PL\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/actions",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"actions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Character (Joe) : no reputation loss from complaint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"// Test for required fields in the response\r",
											"pm.test(\"Response has the required fields\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.name).to.exist;\r",
											"    pm.expect(responseData.type).to.exist;\r",
											"    pm.expect(responseData.reputationScore).to.exist;\r",
											"    pm.expect(responseData.bankBalance).to.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"Reputation score is 63\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData.reputationScore).to.equal(63);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/characters/Joe",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters",
										"Joe"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						}
					],
					"description": "\\- prérequis : ne pas avoir de lancé de fausse rumeur"
				},
				{
					"name": "Scénario 10 : Unique envoi d'action",
					"item": [
						{
							"name": "Reset (init)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/reset",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"reset"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Bob avocat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Bob\",\r\n  \"type\": \"rat\",\r\n  \"salary\": 100\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Robin acteur",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Robin\",\r\n  \"type\": \"hamster\",\r\n  \"salary\": 100\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Joe agent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Joe\",\r\n  \"type\": \"chinchilla\",\r\n  \"salary\": 100\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send False Gossip to Robin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from\": \"Bob\", \r\n  \"to\": \"Robin\",\r\n  \"actionCode\": \"FR\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/actions",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"actions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send False Gossip to Joe",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from\": \"Bob\", \r\n  \"to\": \"Joe\",\r\n  \"actionCode\": \"FR\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/actions",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"actions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Character (Joe) : no reputation loss from gossip",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"// Test for required fields in the response\r",
											"pm.test(\"Response has the required fields\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.name).to.exist;\r",
											"    pm.expect(responseData.type).to.exist;\r",
											"    pm.expect(responseData.reputationScore).to.exist;\r",
											"    pm.expect(responseData.bankBalance).to.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"Reputation score is 69\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData.reputationScore).to.equal(69);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/characters/Joe",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters",
										"Joe"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Character (Robin) : reputation loss from gossip",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"// Test for required fields in the response\r",
											"pm.test(\"Response has the required fields\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.name).to.exist;\r",
											"    pm.expect(responseData.type).to.exist;\r",
											"    pm.expect(responseData.reputationScore).to.exist;\r",
											"    pm.expect(responseData.bankBalance).to.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"Reputation score is 64\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData.reputationScore).to.equal(64);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/characters/Robin",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters",
										"Robin"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						}
					],
					"description": "\\- un personnage ne peut envoyer qu'une action par tour"
				},
				{
					"name": "Scénario 11 : Unique réception d'action",
					"item": [
						{
							"name": "Reset (init)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/reset",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"reset"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Bob avocat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Bob\",\r\n  \"type\": \"rat\",\r\n  \"salary\": 100\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Robin acteur",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Robin\",\r\n  \"type\": \"hamster\",\r\n  \"salary\": 100\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Joe agent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Joe\",\r\n  \"type\": \"chinchilla\",\r\n  \"salary\": 100\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send False Gossip to Bob",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from\": \"Robin\", \r\n  \"to\": \"Bob\",\r\n  \"actionCode\": \"FR\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/actions",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"actions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send False Gossip to Bob",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from\": \"Joe\", \r\n  \"to\": \"Bob\",\r\n  \"actionCode\": \"FR\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/actions",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"actions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Character (Bob) : 5 reputation loss from gossip",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"// Test for required fields in the response\r",
											"pm.test(\"Response has the required fields\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.name).to.exist;\r",
											"    pm.expect(responseData.type).to.exist;\r",
											"    pm.expect(responseData.reputationScore).to.exist;\r",
											"    pm.expect(responseData.bankBalance).to.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"Reputation score is 64\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData.reputationScore).to.equal(64);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/characters/Bob",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters",
										"Bob"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						}
					],
					"description": "\\- un personnage ne peut recevoir qu'une action par tour"
				},
				{
					"name": "Scénario 12 : SpreadGossip",
					"item": [
						{
							"name": "Reset (init)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/reset",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"reset"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Bob avocat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Bob\",\r\n  \"type\": \"rat\",\r\n  \"salary\": 100\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Robin acteur",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Robin\",\r\n  \"type\": \"hamster\",\r\n  \"salary\": 100\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send False Gossip to Bob",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from\": \"Robin\", \r\n  \"to\": \"Bob\",\r\n  \"actionCode\": \"FR\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/actions",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"actions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Character (Bob) : 5 reputation loss from gossip",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"// Test for required fields in the response\r",
											"pm.test(\"Response has the required fields\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.name).to.exist;\r",
											"    pm.expect(responseData.type).to.exist;\r",
											"    pm.expect(responseData.reputationScore).to.exist;\r",
											"    pm.expect(responseData.bankBalance).to.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"Reputation score is 64\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData.reputationScore).to.equal(64);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/characters/Bob",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters",
										"Bob"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Send False Gossip to Bob",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from\": \"Robin\", \r\n  \"to\": \"Bob\",\r\n  \"actionCode\": \"FR\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/actions",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"actions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Character (Bob) : 10 reputation loss from gossip Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"// Test for required fields in the response\r",
											"pm.test(\"Response has the required fields\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.name).to.exist;\r",
											"    pm.expect(responseData.type).to.exist;\r",
											"    pm.expect(responseData.reputationScore).to.exist;\r",
											"    pm.expect(responseData.bankBalance).to.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"Reputation score is 48\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData.reputationScore).to.equal(48);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/characters/Bob",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters",
										"Bob"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Send False Gossip to Bob",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from\": \"Robin\", \r\n  \"to\": \"Bob\",\r\n  \"actionCode\": \"FR\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/actions",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"actions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Character (Bob) : 15 reputation loss from gossip",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"// Test for required fields in the response\r",
											"pm.test(\"Response has the required fields\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.name).to.exist;\r",
											"    pm.expect(responseData.type).to.exist;\r",
											"    pm.expect(responseData.reputationScore).to.exist;\r",
											"    pm.expect(responseData.bankBalance).to.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"Reputation score is 27\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData.reputationScore).to.equal(27);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/characters/Bob",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters",
										"Bob"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Send False Gossip to Bob",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from\": \"Robin\", \r\n  \"to\": \"Bob\",\r\n  \"actionCode\": \"FR\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/actions",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"actions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Character (Bob) : not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 404\", function () {\r",
											"  pm.expect(pm.response.code).to.equal(404);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Error field is CHARACTER_NOT_FOUND\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"  \r",
											"    pm.expect(responseData.error).to.equal(\"CHARACTER_NOT_FOUND\");\r",
											"});\r",
											"\r",
											"pm.test(\"Description field is Character not found.\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"  \r",
											"    pm.expect(responseData.description).to.equal(\"Character not found.\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"No unwanted JSON items are present\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"  \r",
											"    const allowedProperties = [\"error\", \"description\"];\r",
											"  \r",
											"    Object.keys(responseData).forEach(function(key) {\r",
											"        pm.expect(allowedProperties).to.include(key);\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/characters/Bob",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters",
										"Bob"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						}
					],
					"description": "\\- un personnage perd 5, puis 10, puis 15 de réputation"
				},
				{
					"name": "Scénario 13 : Invalid action",
					"item": [
						{
							"name": "Reset (init)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/reset",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"reset"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Invalid action",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 400\", function () {\r",
											"  pm.expect(pm.response.code).to.equal(400);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Error field is INVALID_ACTION_CODE\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"  \r",
											"    pm.expect(responseData.error).to.equal(\"INVALID_ACTION_CODE\");\r",
											"});\r",
											"\r",
											"pm.test(\"Description field is The action code is invalid.\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"  \r",
											"    pm.expect(responseData.description).to.equal(\"The action code is invalid.\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"No unwanted JSON items are present\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"  \r",
											"    const allowedProperties = [\"error\", \"description\"];\r",
											"  \r",
											"    Object.keys(responseData).forEach(function(key) {\r",
											"        pm.expect(allowedProperties).to.include(key);\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from\": \"Robin\", \r\n  \"to\": \"Bob\",\r\n  \"actionCode\": \"QC\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/actions",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"actions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						}
					],
					"description": "teste erreur"
				},
				{
					"name": "Scénario 14 : Scandal agent",
					"item": [
						{
							"name": "Reset (init)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/reset",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"reset"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Bob avocat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Bob\",\r\n  \"type\": \"rat\",\r\n  \"salary\": 100\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Robin acteur",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Robin\",\r\n  \"type\": \"hamster\",\r\n  \"salary\": 100\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Joe agent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Joe\",\r\n  \"type\": \"chinchilla\",\r\n  \"salary\": 100\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Hamstagram (Joe)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Joe represent should be Robin\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"     pm.expect(responseData.represent).to.be.an('array').and.to.include(\"Robin\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/hamstagram/Joe",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"hamstagram",
										"Joe"
									]
								}
							},
							"response": []
						},
						{
							"name": "Hamstagram (Robin)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Check if representedBy is Joe\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.representedBy).to.equal(\"Joe\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/hamstagram/Robin",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"hamstagram",
										"Robin"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Scandal to Joe",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from\": \"Bob\", \r\n  \"to\": \"Joe\",\r\n  \"actionCode\": \"SC\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/actions",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"actions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Hamstagram (Joe)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Joe represent should be empty\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"     pm.expect(responseData.represent).to.be.an('array').and.to.have.lengthOf(0, \"Array length should be 0\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/hamstagram/Joe",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"hamstagram",
										"Joe"
									]
								}
							},
							"response": []
						},
						{
							"name": "Hamstagram (Robin)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Check if representedBy is empty\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.representedBy).to.equal(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/hamstagram/Robin",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"hamstagram",
										"Robin"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Hamstagram (Joe)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Joe represent should be empty\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"     pm.expect(responseData.represent).to.be.an('array').and.to.have.lengthOf(0, \"Array length should be 0\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/hamstagram/Joe",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"hamstagram",
										"Joe"
									]
								}
							},
							"response": []
						},
						{
							"name": "Hamstagram (Robin)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Check if representedBy is empty\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.representedBy).to.equal(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/hamstagram/Robin",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"hamstagram",
										"Robin"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Hamstagram (Joe)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Joe represent should be Robin\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"     pm.expect(responseData.represent).to.be.an('array').and.to.include(\"Robin\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/hamstagram/Joe",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"hamstagram",
										"Joe"
									]
								}
							},
							"response": []
						},
						{
							"name": "Hamstagram (Robin)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Check if representedBy is Joe\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.representedBy).to.equal(\"Joe\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/hamstagram/Robin",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"hamstagram",
										"Robin"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						}
					],
					"description": "Agent scandale"
				}
			]
		},
		{
			"name": "story6",
			"item": [
				{
					"name": "Scenario 1 : Un acteur joue l’action SC - Révéler un scandale.",
					"item": [
						{
							"name": "Reset (init)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/reset",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"reset"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Joe actor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Joe\",\r\n  \"type\": \"hamster\",\r\n  \"salary\": 2100000\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Dave actor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Dave\",\r\n  \"type\": \"hamster\",\r\n  \"salary\": 2100000\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Max agent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Max\",\r\n  \"type\": \"chinchilla\",\r\n  \"salary\": 12\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add  Bob avocat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Bob\",\r\n  \"type\": \"rat\",\r\n  \"salary\": 12\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Scandal",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from\": \"Joe\", \r\n  \"to\": \"Dave\",\r\n  \"actionCode\": \"SC\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/actions",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"actions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Character (Joe)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Joe a maintenant 1 poursuite.\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData.nbLawsuits).to.equal(1);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/characters/Joe",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters",
										"Joe"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Lawsuits",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Turn number equals 2\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const lawsuit = responseData[0];\r",
											"    pm.expect(lawsuit.turnNumber).to.equal(2);\r",
											"});\r",
											"\r",
											"pm.test(\"characterName is Joe\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const lawsuit = responseData[0];\r",
											"    pm.expect(lawsuit.characterName).to.equal(\"Joe\");\r",
											"});\r",
											"\r",
											"pm.test(\"actionCode is SC\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const lawsuit = responseData[0];\r",
											"    pm.expect(lawsuit.actionCode).to.equal(\"SC\");\r",
											"});\r",
											"\r",
											"pm.test(\"lawyer is null\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const lawsuit = responseData[0];\r",
											"    pm.expect(lawsuit.lawyerName).to.null;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/lawsuits",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"lawsuits"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Character (Joe)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Joe a maintenant 1 poursuite.\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData.nbLawsuits).to.equal(1);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/characters/Joe",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters",
										"Joe"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Lawsuits",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Turn number equals 2\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const lawsuit = responseData[0];\r",
											"    pm.expect(lawsuit.turnNumber).to.equal(2);\r",
											"});\r",
											"\r",
											"pm.test(\"characterName is Joe\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const lawsuit = responseData[0];\r",
											"    pm.expect(lawsuit.characterName).to.equal(\"Joe\");\r",
											"});\r",
											"\r",
											"pm.test(\"actionCode is SC\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const lawsuit = responseData[0];\r",
											"    pm.expect(lawsuit.actionCode).to.equal(\"SC\");\r",
											"});\r",
											"\r",
											"pm.test(\"lawyer is null\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const lawsuit = responseData[0];\r",
											"    pm.expect(lawsuit.lawyerName).to.null;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/lawsuits",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"lawsuits"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "RattedIn contact request Bob to Max",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"Max\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/rattedin/Bob/request",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"rattedin",
										"Bob",
										"request"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Character (Joe)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Joe a maintenant 1 poursuite.\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData.nbLawsuits).to.equal(1);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/characters/Joe",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters",
										"Joe"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Character (Joe)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Joe a maintenant 1 poursuite.\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData.nbLawsuits).to.equal(1);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/characters/Joe",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters",
										"Joe"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Lawsuits",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Turn number equals 2\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const lawsuit = responseData[0];\r",
											"    pm.expect(lawsuit.turnNumber).to.equal(2);\r",
											"});\r",
											"\r",
											"pm.test(\"characterName is Joe\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const lawsuit = responseData[0];\r",
											"    pm.expect(lawsuit.characterName).to.equal(\"Joe\");\r",
											"});\r",
											"\r",
											"pm.test(\"actionCode is SC\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const lawsuit = responseData[0];\r",
											"    pm.expect(lawsuit.actionCode).to.equal(\"SC\");\r",
											"});\r",
											"\r",
											"pm.test(\"lawyer is Bob\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const lawsuit = responseData[0];\r",
											"    pm.expect(lawsuit.lawyerName).to.equal(\"Bob\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/lawsuits",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"lawsuits"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Character (Joe)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Joe a maintenant 0 poursuite.\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData.nbLawsuits).to.equal(0);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/characters/Joe",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters",
										"Joe"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Lawsuits",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Lawsuits is empty\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const lawsuit = responseData;\r",
											"    pm.expect(lawsuit).to.be.an('array').and.to.have.lengthOf(0, \"Array length should be 0\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/lawsuits",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"lawsuits"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Scénario 2 : Un acteur joue l’action SC",
					"item": [
						{
							"name": "Reset (init)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/reset",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"reset"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Joe actor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Joe\",\r\n  \"type\": \"hamster\",\r\n  \"salary\": 2100000\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Dave actor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Dave\",\r\n  \"type\": \"hamster\",\r\n  \"salary\": 2100000\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Max agent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Max\",\r\n  \"type\": \"chinchilla\",\r\n  \"salary\": 12\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add  Bob avocat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Bob\",\r\n  \"type\": \"rat\",\r\n  \"salary\": 12\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "RattedIn contact request Bob to Max",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"Max\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/rattedin/Bob/request",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"rattedin",
										"Bob",
										"request"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Scandal",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from\": \"Joe\", \r\n  \"to\": \"Dave\",\r\n  \"actionCode\": \"SC\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/actions",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"actions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Character (Joe)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Joe a maintenant 1 poursuite.\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData.nbLawsuits).to.equal(1);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/characters/Joe",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters",
										"Joe"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Lawsuits",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Turn number equals 3\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const lawsuit = responseData[0];\r",
											"    pm.expect(lawsuit.turnNumber).to.equal(3);\r",
											"});\r",
											"\r",
											"pm.test(\"characterName is Joe\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const lawsuit = responseData[0];\r",
											"    pm.expect(lawsuit.characterName).to.equal(\"Joe\");\r",
											"});\r",
											"\r",
											"pm.test(\"actionCode is SC\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const lawsuit = responseData[0];\r",
											"    pm.expect(lawsuit.actionCode).to.equal(\"SC\");\r",
											"});\r",
											"\r",
											"pm.test(\"lawyer is null\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const lawsuit = responseData[0];\r",
											"    pm.expect(lawsuit.lawyerName).to.null;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/lawsuits",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"lawsuits"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Character (Joe)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Joe a 1 poursuite.\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData.nbLawsuits).to.equal(1);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/characters/Joe",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters",
										"Joe"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Lawsuits",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Turn number equals 3\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const lawsuit = responseData[0];\r",
											"    pm.expect(lawsuit.turnNumber).to.equal(3);\r",
											"});\r",
											"\r",
											"pm.test(\"characterName is Joe\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const lawsuit = responseData[0];\r",
											"    pm.expect(lawsuit.characterName).to.equal(\"Joe\");\r",
											"});\r",
											"\r",
											"pm.test(\"actionCode is SC\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const lawsuit = responseData[0];\r",
											"    pm.expect(lawsuit.actionCode).to.equal(\"SC\");\r",
											"});\r",
											"\r",
											"pm.test(\"lawyer is Bob\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const lawsuit = responseData[0];\r",
											"    pm.expect(lawsuit.lawyerName).to.equal(\"Bob\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/lawsuits",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"lawsuits"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Character (Joe)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Joe a 0 poursuite.\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData.nbLawsuits).to.equal(0);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/characters/Joe",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters",
										"Joe"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Lawsuits",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Lawsuits is empty\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const lawsuit = responseData;\r",
											"    pm.expect(lawsuit).to.be.an('array').and.to.have.lengthOf(0, \"Array length should be 0\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/lawsuits",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"lawsuits"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Scénario 3 : FR reçoit lawsuit",
					"item": [
						{
							"name": "Reset (init)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/reset",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"reset"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Bob avocat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Bob\",\r\n  \"type\": \"rat\",\r\n  \"salary\": 100\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Robin acteur",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Robin\",\r\n  \"type\": \"hamster\",\r\n  \"salary\": 100\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Robin Send False Gossip to Bob",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from\": \"Robin\", \r\n  \"to\": \"Bob\",\r\n  \"actionCode\": \"FR\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/actions",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"actions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Character (Robin)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Robin a maintenant 1 poursuite.\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData.nbLawsuits).to.equal(1);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/characters/Robin",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters",
										"Robin"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						}
					],
					"description": "Quand un Character lance FR, il reçoit une lawsuit"
				},
				{
					"name": "Scénario 4 : PL reçoit lawsuit",
					"item": [
						{
							"name": "Reset (init)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/reset",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"reset"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Bob avocat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Bob\",\r\n  \"type\": \"rat\",\r\n  \"salary\": 100\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Robin acteur",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Robin\",\r\n  \"type\": \"hamster\",\r\n  \"salary\": 100\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Robin Send PL to Bob",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from\": \"Robin\", \r\n  \"to\": \"Bob\",\r\n  \"actionCode\": \"PL\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/actions",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"actions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Character (Robin)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Robin a maintenant 1 poursuite.\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData.nbLawsuits).to.equal(1);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/characters/Robin",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters",
										"Robin"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						}
					],
					"description": "Quand un Character lance PL, il reçoit une lawsuit"
				},
				{
					"name": "Scénario 5 : choose higher reputation",
					"item": [
						{
							"name": "Reset (init)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/reset",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"reset"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add LowRep avocat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"LowRep\",\r\n  \"type\": \"rat\",\r\n  \"salary\": 100\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Robin agent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Robin\",\r\n  \"type\": \"chinchilla\",\r\n  \"salary\": 100\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add HighRep avocat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"HighRep\",\r\n  \"type\": \"rat\",\r\n  \"salary\": 100\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Robin Send FR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from\": \"Robin\", \r\n  \"to\": \"LowRep\",\r\n  \"actionCode\": \"FR\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/actions",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"actions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "RattedIn contact request Robin to LowRep",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"Robin\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/rattedin/LowRep/request",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"rattedin",
										"LowRep",
										"request"
									]
								}
							},
							"response": []
						},
						{
							"name": "RattedIn contact request Robin to HighRep",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"Robin\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/rattedin/HighRep/request",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"rattedin",
										"HighRep",
										"request"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Lawsuits",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"lawyer is HighRep\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const lawsuit = responseData[0];\r",
											"    pm.expect(lawsuit.lawyerName).to.equals(\"HighRep\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/lawsuits",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"lawsuits"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "RattedIn HighRep",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has required fields\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.username).to.exist;",
											"    pm.expect(responseData.status).to.exist;",
											"    pm.expect(responseData.contacts).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Username is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.username).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Username should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Check if status is busy\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.status).to.equal(\"busy\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/rattedin/HighRep",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"rattedin",
										"HighRep"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "RattedIn HighRep",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has required fields\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.username).to.exist;",
											"    pm.expect(responseData.status).to.exist;",
											"    pm.expect(responseData.contacts).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Username is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.username).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Username should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Check if status is openToWork\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.status).to.equal(\"openToWork\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/rattedin/HighRep",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"rattedin",
										"HighRep"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						}
					],
					"description": "Quand un Character choisit un avocat, il prend celui avec la + haute réputation\n\nL'avocat passe alors à busy\n\nAprès la lawsuit, magie, l'avocat est de nouveau #openToWork (au chômage donc)"
				},
				{
					"name": "Scénario 6 : lawsuit remove from movie",
					"item": [
						{
							"name": "Reset (init)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/reset",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"reset"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Bob actor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Bob\",\r\n  \"type\": \"hamster\",\r\n  \"salary\": 100\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Joe actor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Joe\",\r\n  \"type\": \"hamster\",\r\n  \"salary\": 100\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Movie Rats of the caribbean Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"Rats of the Caribbean\",\r\n  \"type\": \"A\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/movies",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"movies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Movies : Rats of the caribbean",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Rats of the caribbean potential casting should have Bob and Joe\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[0];\r",
											"    pm.expect(movie.potentialCasting).to.be.an('array').that.include(\"Bob\", \"Joe\");\r",
											"});\r",
											"\r",
											"pm.test(\"Rats of the caribbean casting should be empty\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[0];\r",
											"     pm.expect(movie.casting).to.be.an('array').and.to.have.lengthOf(0, \"Array length should be 0\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/movies",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"movies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Bob send Gossip",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from\": \"Bob\", \r\n  \"to\": \"Joe\",\r\n  \"actionCode\": \"FR\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/actions",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"actions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Movies : Rats of the caribbean",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Rats of the caribbean potential casting should not have Bob\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[0];\r",
											"    pm.expect(movie.potentialCasting).to.be.an('array').not.that.include(\"Bob\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/movies",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"movies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Movies : Rats of the caribbean",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Rats of the caribbean potential casting should not have Bob\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[0];\r",
											"    pm.expect(movie.potentialCasting).to.be.an('array').not.that.include(\"Bob\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/movies",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"movies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						}
					],
					"description": "Un acteur qui reçoit une plainte est enlevé du casting, et ne peut pas le rejoindre tant que sa poursuite n'a pas été résolue"
				},
				{
					"name": "Scénario 7 : lawsuit agent lose actors",
					"item": [
						{
							"name": "Reset (init)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/reset",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"reset"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Moretti avocat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Moretti\",\r\n  \"type\": \"rat\",\r\n  \"salary\": 100\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Deneuve actrice",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Deneuve\",\r\n  \"type\": \"hamster\",\r\n  \"salary\": 100\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Besnehard agent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Besnehard\",\r\n  \"type\": \"chinchilla\",\r\n  \"salary\": 100\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Hamstagram (Deneuve)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Check if representedBy is Besnehard\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.representedBy).to.equal(\"Besnehard\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/hamstagram/Deneuve",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"hamstagram",
										"Deneuve"
									]
								}
							},
							"response": []
						},
						{
							"name": "Hamstagram (Besnehard)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Besnehard represent should contain Deneuve\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"     pm.expect(responseData.represent).to.be.an('array').that.include(\"Deneuve\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/hamstagram/Besnehard",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"hamstagram",
										"Besnehard"
									]
								}
							},
							"response": []
						},
						{
							"name": "Besnehard send gossip to Deneuve",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from\": \"Besnehard\", \r\n  \"to\": \"Deneuve\",\r\n  \"actionCode\": \"FR\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/actions",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"actions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Hamstagram (Besnehard)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Besnehard represent should be empty\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"     pm.expect(responseData.represent).to.be.an('array').and.to.have.lengthOf(0, \"Array length should be 0\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/hamstagram/Besnehard",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"hamstagram",
										"Besnehard"
									]
								}
							},
							"response": []
						},
						{
							"name": "Hamstagram (Deneuve)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Check if representedBy is empty\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.representedBy).to.equal(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/hamstagram/Deneuve",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"hamstagram",
										"Deneuve"
									]
								}
							},
							"response": []
						},
						{
							"name": "RattedIn contact request Bob to Max Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"Besnehard\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/rattedin/Moretti/request",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"rattedin",
										"Moretti",
										"request"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Hamstagram (Besnehard)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Besnehard represent should be empty\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"     pm.expect(responseData.represent).to.be.an('array').and.to.have.lengthOf(0, \"Array length should be 0\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/hamstagram/Besnehard",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"hamstagram",
										"Besnehard"
									]
								}
							},
							"response": []
						},
						{
							"name": "Hamstagram (Deneuve)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Check if representedBy is empty\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.representedBy).to.equal(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/hamstagram/Deneuve",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"hamstagram",
										"Deneuve"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						}
					],
					"description": "Lorsqu'un agent se prend une plainte, il perd ses acteurs"
				},
				{
					"name": "Scénario 8 : lawsuit avocat remove client",
					"item": [
						{
							"name": "Reset (init)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/reset",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"reset"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Dupont Moretti avocat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Dupont Moretti\",\r\n  \"type\": \"rat\",\r\n  \"salary\": 100\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Sarkozy agent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Sarkozy\",\r\n  \"type\": \"chinchilla\",\r\n  \"salary\": 100\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Kadhafi agent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Kadhafi\",\r\n  \"type\": \"chinchilla\",\r\n  \"salary\": 100\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "RattedIn contact request Sarkozy to Dupont Moretti",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"Sarkozy\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/rattedin/Dupont Moretti/request",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"rattedin",
										"Dupont Moretti",
										"request"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sarkozy send Gossip to Khadafi",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from\": \"Sarkozy\", \r\n  \"to\": \"Kadhafi\",\r\n  \"actionCode\": \"FR\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/actions",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"actions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sarkozy send Gossip to Khadafi",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from\": \"Sarkozy\", \r\n  \"to\": \"Kadhafi\",\r\n  \"actionCode\": \"FR\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/actions",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"actions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Lawsuits",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"lawyer 1 is Dupont Moretti\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const lawsuit = responseData[0];\r",
											"    pm.expect(lawsuit.lawyerName).to.equals(\"Dupont Moretti\");\r",
											"});\r",
											"\r",
											"pm.test(\"lawyer 2 is Dupont Moretti\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const lawsuit = responseData[1];\r",
											"    pm.expect(lawsuit.lawyerName).to.equals(\"Dupont Moretti\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/lawsuits",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"lawsuits"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Dupont Moretti send Gossip to Khadafi",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from\": \"Dupont Moretti\", \r\n  \"to\": \"Kadhafi\",\r\n  \"actionCode\": \"FR\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/actions",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"actions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Lawsuits",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"lawyer 1 is null\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const lawsuit = responseData[0];\r",
											"    pm.expect(lawsuit.lawyerName).to.equals(null);\r",
											"});\r",
											"\r",
											"pm.test(\"lawyer 2 is null\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const lawsuit = responseData[1];\r",
											"    pm.expect(lawsuit.lawyerName).to.equals(null);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/lawsuits",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"lawsuits"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						}
					],
					"description": "Quand un avocat (Dupont Moretti), qui défend un client (Sarkozy), se prend une plainte, perd son client."
				},
				{
					"name": "Scénario 9 : after lawsuit rejoin movie",
					"item": [
						{
							"name": "Reset (init)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/reset",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"reset"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Bob actor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Bob\",\r\n  \"type\": \"hamster\",\r\n  \"salary\": 100\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Joe actor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Joe\",\r\n  \"type\": \"hamster\",\r\n  \"salary\": 100\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Max agent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Max\",\r\n  \"type\": \"chinchilla\",\r\n  \"salary\": 12\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Moretti avocat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Moretti\",\r\n  \"type\": \"rat\",\r\n  \"salary\": 100\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/characters",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Movie Rats of the caribbean Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"Rats of the Caribbean\",\r\n  \"type\": \"A\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/movies",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"movies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "RattedIn contact request Moretti to Bob",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"Moretti\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/rattedin/Max/request",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"rattedin",
										"Max",
										"request"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Movies : Rats of the caribbean",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Rats of the caribbean potential casting should have Bob and Joe\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[0];\r",
											"    pm.expect(movie.potentialCasting).to.be.an('array').that.include(\"Bob\", \"Joe\");\r",
											"});\r",
											"\r",
											"pm.test(\"Rats of the caribbean casting should be empty\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[0];\r",
											"     pm.expect(movie.casting).to.be.an('array').and.to.have.lengthOf(0, \"Array length should be 0\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/movies",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"movies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Bob send Gossip",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from\": \"Bob\", \r\n  \"to\": \"Joe\",\r\n  \"actionCode\": \"FR\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8181/actions",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"actions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Movies : Rats of the caribbean",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Rats of the caribbean potential casting should not have Bob\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[0];\r",
											"    pm.expect(movie.potentialCasting).to.be.an('array').not.that.include(\"Bob\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/movies",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"movies"
									]
								}
							},
							"response": []
						},
						{
							"name": "RattedIn Bob",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/rattedin/Max",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"rattedin",
										"Max"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Movies : Rats of the caribbean",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Rats of the caribbean potential casting should not have Bob\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[0];\r",
											"    pm.expect(movie.potentialCasting).to.be.an('array').not.that.include(\"Bob\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/movies",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"movies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						},
						{
							"name": "Movies : Rats of the caribbean",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Rats of the caribbean potential casting should have Bob and Joe\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[0];\r",
											"    pm.expect(movie.potentialCasting).to.be.an('array').that.include(\"Bob\", \"Joe\");\r",
											"});\r",
											"\r",
											"pm.test(\"Rats of the caribbean casting should be empty\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    const movie = responseData[0];\r",
											"     pm.expect(movie.casting).to.be.an('array').and.to.have.lengthOf(0, \"Array length should be 0\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8181/movies",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"movies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Turn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8181/turn",
									"host": [
										"localhost"
									],
									"port": "8181",
									"path": [
										"turn"
									]
								}
							},
							"response": []
						}
					],
					"description": "Un acteur qui reçoit une plainte est enlevé du casting, et ne peut pas le rejoindre tant que sa poursuite n'a pas été résolue\n\nLorsqu'elle est résolue, elle rejoint le casting"
				}
			]
		}
	]
}